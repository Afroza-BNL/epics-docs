Build Facility
--------------

.. contents:: Table of Contents
 :depth: 3


Janet Anderson is the author of this chapter.

Overview
~~~~~~~~

This chapter describes the EPICS build facility including directory
structure, environment and system requirements, conﬁguration ﬁles,
Makeﬁles, and related build tools.

\<top\>Directory structure
^^^^^^^^^^^^^^^^^^^^^^^^^^

EPICS software can be divided into multiple <top> areas. Examples of
<top> areas are EPICS base itself, EPICS extensions, and simple or
complicated IOC applications. Each <top> may be maintained separately.
Diﬀerent <top> areas can be on diﬀerent releases of external software
such as EPICS base releases.

A <top> directory has the following directory structure:

.. code ::

                <top>/
                    Makefile
                    configure/
                    dir1/
                    dir2/
                    ...

where configure is a directory containing build conﬁguration ﬁles and a
Makefile, where dir1, dir2, ... are user created subdirectory trees with
Makefiles and source ﬁles to be built. Because the build rules allow
make commands like “make install.vxWorks-68040”, subdirectory names
within a <top> directory structure may not contain a period ”.”
character.

Install Directories
^^^^^^^^^^^^^^^^^^^

Files installed during the build are installed into subdirectories of
an installation directory which defaults to $(TOP), the <top>
directory. For base, extensions, and IOC applications, the default
value can be changed in the
configure/CONFIG_SITE ﬁle. The installation directory for the EPICS
components is controlled by the deﬁnition of INSTALL_LOCATION

The following subdirectories may exist in the installation directory.
They are created by the build and contain the installed build
components.

-  dbd – Directory into which Database Deﬁnition ﬁles are installed.
-  include – The directory into which C header ﬁles are installed. These
   header ﬁles may be generated from menu and record type deﬁnitions.
-  bin – This directory contains a subdirectory for each host
   architecture and for each target architecture. These are the
   directories into which executables, binaries, etc. are installed.
-  lib – This directory contains a subdirectory for each host
   architecture. These are the directories into which libraries are
   installed.
-  db – This is the directory into which database record instance,
   template, and substitution ﬁles are installed.
-  html – This is the directory into which html documentation is
   installed.
-  templates – This is the directory into which template ﬁles are
   installed.
-  javalib – This is the directory into which java class ﬁles and jar
   ﬁles are installed.
-  configure – The directory into which conﬁgure ﬁles are installed (if
   INSTALL_LOCATION does not equal TOP).
-  cfg – The directory into which user created conﬁgure ﬁles are
   installed

Elements of build system
^^^^^^^^^^^^^^^^^^^^^^^^

The main ingredients of the build system are:

-  A set of conﬁguration ﬁles and tools provided in the EPICS
   base/configure directory
-  A corresponding set of conﬁguration ﬁles in the <top>/configure
   directory of a non-base <top> directory structure to be built. The
   makeBaseApp.pl and makeBaseExt.pl scripts create these conﬁguration
   ﬁles. Many of these ﬁles just include a ﬁle of the same name from the
   base/configure directory.
-  Makeﬁles in each directory of the <top> directory structure to be
   built
-  User created conﬁguration ﬁles in build created
   $(INSTALL_LOCATION)/cfg directories.

Features
^^^^^^^^

The principal features of the build system are:

-  Requires a single Makefile in each directory of a <top> directory
   structure
-  Supports both host os vendor’s native compiler and GNU compiler
-  Supports building multiple types of software (libraries, executables,
   databases, java class ﬁles, etc.) stored in a single directory tree.
-  Supports building EPICS base, extensions, and IOC applications.
-  Supports multiple host and target operating system + architecture
   combinations.
-  Allows builds for all hosts and targets within a single <top> source
   directory tree.
-  Allows sharing of components such as special record/device/drivers
   across <top> areas.
-  gnumake is the only command used to build a <top> area.

Multiple host and target systems
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You can build on multiple host systems and for multiple cross target
systems using a single EPICS directory structure. The intermediate and
binary ﬁles generated by the build will be created in separate O.\*
subdirectories and installed into the appropriate separate host or
target install directories. EPICS executables and scripts are installed
into the $(INSTALL_LOCATION)/bin/<arch> directories. Libraries are
installed into $(INSTALL_LOCATION)/lib/<arch>. The default deﬁnition for
$(INSTALL_LOCATION) is $(TOP) which is the root directory in the
directory structure. Architecture dependant created ﬁles (e.g. object
ﬁles) are stored in O.<arch> source subdirectories, and architecture
independent created ﬁles are stored in O.Common source subdirectories.
This allows objects for multiple cross target architectures to be
maintained at the same time.

To build EPICS base for a speciﬁc host/target combination you must have
the proper host/target c/c++ cross compiler and target header ﬁles,
CROSS_COMPILER_HOST_ARCHS must empty or include the host architecture in
its list value, the CROSS_COMPILER_TARGET_ARCHS variable must include
the target to be cross-compiled, and the base/conﬁgure/ os directory
must have the appropriate conﬁgure ﬁles.

Build Requirements
~~~~~~~~~~~~~~~~~~

Host Environment Variable
^^^^^^^^^^^^^^^^^^^^^^^^^

Only one environment variable, EPICS_HOST_ARCH, is required to build
EPICS <top> areas. This variable should be set to be your workstation’s
operating system - architecture combination to use the os vendor’s c/c++
compiler for native builds or set to the operating system - architecture
- alternate compiler combination to use an alternate compiler for native
builds if an alternate compiler is supported on your system. The
ﬁlenames of the CONFIG.⋆.Common ﬁles in base/ conﬁgure/os show the
currently supported EPICS_HOST_ARCH values. Examples are solaris-sparc,
solaris-sparc-gnu, linux-x86, win32-x86, and cygwin-x86.

Software Prerequisites
^^^^^^^^^^^^^^^^^^^^^^

Before you can build EPICS components your host system must have the
following software installed:

-  Perl version 5.8 or greater
-  GNU make, version 3.81 or greater
-  C++ compiler (host operating system vendor’s compiler or GNU
   compiler)

If you will be building EPICS components for vxWorks targets you will
also need:

-  Tornado II or vxWorks 6.x or later, and one or more board support packages.
   Consult the vxWorks documentation for details.

If you will be building EPICS components for RTEMS targets you will also
need:

-  RTEMS development tools and libraries required to run EPICS IOC
   applications.

Path requirements
^^^^^^^^^^^^^^^^^

You must have the perl executable in your path and you may need C and
C++ compilers in your search path. Check deﬁnitions of CC and CCC in
base/configure/os/CONFIG.<host>.<host> or the deﬁnitions for GCC and G++
if ANSI=GCC and CPLUSPLUS=GCC are speciﬁed in CONFIG_SITE. For building
base you also must have echo in your search path. You can override the
default settings by deﬁning PERL, CC and CCC, GCC and G++, GNU_DIR ...
in the appropriate ﬁle (usually
configure/os/CONFIG_SITE.$EPICS_HOST_ARCH.Common)

Unix path
'''''''''

For Unix host builds you also need touch, cpp, cp, rm, mv, and mkdir in
your search path and /bin/chmod must exist. On some Unix systems you may
also need ar and ranlib in your path, and the c compiler may require ld
in your path.

Win32 PATH
''''''''''

On WIN32 systems, building shared libraries is the default setting and
you will need to add fullpathname to
$(INSTALL_LOCATION)/bin/$(EPICS_HOST_ARCH) to your path so the shared
libraries, dlls, can be found during the build.. Building shared
libraries is determined by the value of the macro SHARED_LIBRARIES in
CONFIG_SITE or os/CONFIG.Common.<host> (either YES or NO).

Directory names
^^^^^^^^^^^^^^^

Because the build rules allow make commands like
“make <dir>.<action>,<arch>”, subdirectory names within a <top>
directory structure may not contain a period”.” character.

EPICS_HOST_ARCH environment variable
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The startup directory in EPICS base contains a perl script,
EpicsHostArch.pl, which can be used to deﬁne EPICS_HOST_ARCH. This
script can be invoked with a command line parameter deﬁning the
alternate compiler (e.g. if invoking EpicsHostArch.pl yields
solaris-sparc, then invoking EpicsHostArch.pl gnu will yield
solaris-sparc-gnu).

The startup directory also contains scripts to help users set the path
and other environment variables.

Conﬁguration Deﬁnitions
~~~~~~~~~~~~~~~~~~~~~~~

Site-speciﬁc EPICS Base Conﬁguration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Site conﬁguration
'''''''''''''''''

To conﬁgure EPICS base for your site, you may want to modify the default
deﬁnitions in the following ﬁles:

   configure/CONFIG_SITE Build choices. Specify target archs.
   configure/CONFIG_SITE_ENV Environment variable defaults

Host conﬁguration
'''''''''''''''''

To conﬁgure each host system for your site, you may override the default
deﬁnitions in the configure/os directory by adding a new ﬁle with
override deﬁnitions. The new ﬁle should have the same name as the
distribution ﬁle to be overridden except CONFIG in the name is changed
to CONFIG_SITE.

   configure/os/CONFIG_SITE.<host>.<host> - Host build settings
   configure/os/CONFIG_SITE.<host>.Common - Host build settings for all
   target systems

Target conﬁguration
'''''''''''''''''''

To conﬁgure each target system, you may override the default deﬁnitions
in the configure/os directory by adding a new ﬁle with override
deﬁnitions. The new ﬁle should have the same name as the distribution
ﬁle to be overridden except CONFIG in the name is replaced by
CONFIG_SITE.

   configure/os/CONFIG_SITE.Common.<target> - Target cross settings
   configure/os/CONFIG_SITE.<host>.<target> - Host-target settings
   configure/os/CONFIG_SITE.Common.vxWorksCommon - vxWorks full paths

R3.13 compatibility conﬁguration
''''''''''''''''''''''''''''''''

To conﬁgure EPICS base for building with R3.13 extensions and ioc
applications, you must modify the default deﬁnitions in the
base/conﬁg/CONFIG_SITE\* ﬁles to agree with site deﬁnitions you made in
base/conﬁgure and base/conﬁgure/os ﬁles.You must also modify the
following tow macros in the base/conﬁgure/CONFIG_SITE ﬁle:

   COMPAT_TOOLS_313 - Set to YES to build R3.13 extensions with this
   base.
   COMPAT_313 - Set to YES to build R3.13 ioc applications and
   extensions with this base.

Directory deﬁnitions
^^^^^^^^^^^^^^^^^^^^

The conﬁgure ﬁles contain deﬁnitions for locations in which to install
various components. These are all relative to INSTALL_LOCATION. The
default value for INSTALL_LOCATION is $(TOP), and $(T_A) is the current
build’s target architecture. The default value for INSTALL_LOCATION can
be overridden in the configure/CONFIG_SITE ﬁle.

.. code ::

        INSTALL_LOCATION_LIB      = $(INSTALL_LOCATION)/lib
        INSTALL_LOCATION_BIN      = $(INSTALL_LOCATION)/bin
        
        INSTALL_HOST_BIN          = $(INSTALL_LOCATION_BIN)/$(EPICS_HOST_ARCH)
        INSTALL_HOST_LIB          = $(INSTALL_LOCATION_LIB)/$(EPICS_HOST_ARCH)
        
        INSTALL_INCLUDE           = $(INSTALL_LOCATION)/include
        INSTALL_DOC               = $(INSTALL_LOCATION)/doc
        INSTALL_HTML              = $(INSTALL_LOCATION)/html
        INSTALL_TEMPLATES         = $(INSTALL_LOCATION)/templates
        INSTALL_DBD               = $(INSTALL_LOCATION)/dbd
        INSTALL_DB                = $(INSTALL_LOCATION)/db
        INSTALL_CONFIG            = $(INSTALL_LOCATION)/configure
        INSTALL_JAVA              = $(INSTALL_LOCATION)/javalib
        
        INSTALL_LIB               = $(INSTALL_LOCATION_LIB)/$(T_A)
        INSTALL_SHRLIB            = $(INSTALL_LOCATION_LIB)/$(T_A)
        INSTALL_TCLLIB            = $(INSTALL_LOCATION_LIB)/$(T_A)
        INSTALL_BIN               = $(INSTALL_LOCATION_BIN)/$(T_A)

Extension and Application Speciﬁc Conﬁguration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

| The base/configure directory contains ﬁles with the default build
  deﬁnitions and site speciﬁc build deﬁnitions. The extensions/configure
  directory contains extension speciﬁc build deﬁnitions (e.g. location
  of X11 and Motif libraries) and “include <filename>” lines for the
  base/configure ﬁles. Likewise, the <application>/configure directory
  contains application speciﬁc build deﬁnitions and includes for the
  application source ﬁles. Build deﬁnitions such as
| CROSS_COMPILER_TARGET_ARCHS can be overridden in an extension or
  application by placing an override deﬁnition in the
  <top>/configure/CONFIG_SITE ﬁle.

RELEASE ﬁle
^^^^^^^^^^^

Every <top>/configure directory contains a RELEASE ﬁle. RELEASE contains
a user speciﬁed list of other <top> directory structures containing ﬁles
needed by the current <top>, and may also include other ﬁles to take
those deﬁnitions from elsewhere. The macros deﬁned in the RELEASE ﬁle
(or its includes) may reference other deﬁned macros, but cannot rely on
environment variables to provide deﬁnitions.

When make is executed, macro deﬁnitions for include, bin, and library
directories are automatically generated for each external <top>
deﬁnition given in the RELEASE ﬁle. Also generated are include
statements for any existing RULES_BUILD ﬁles, cfg/RULES\* ﬁles, and
cfg/CONFIG\* ﬁles from each external <top> listed in the RELEASE ﬁle.

For example, if configure/RELEASE contains the deﬁnition

.. code ::

        CAMAC = /home/epics/modules/bus/camac

then the generated macros will be:

.. code ::

        CAMAC_HOST_BIN = /home/epics/modules/bus/camac/bin/$(EPICS_HOST_ARCH)
        CAMAC_HOST_LIB = /home/epics/modules/bus/camac/lib/$(EPICS_HOST_ARCH
        CAMAC_BIN = /home/epics/modules/bus/camac/bin/$(T_A)
        CAMAC_LIB = /home/epics/modules/bus/camac/lib/$(T_A)
        RELEASE_INCLUDES += -I/home/epics/modules/bus/camac/include/os
        RELEASE_INCLUDES += -I/home/epics/modules/bus/camac/include
        RELEASE_DBDFLAGS += -I /home/epics/modules/bus/camac/dbd
        RELEASE_DBFLAGS += -I/home/epics/modules/bus/camac/db
        RELEASE_PERL_MODULE_DIRS += /home/epics/modules/bus/camac/lib/perl

RELEASE_DBDFLAGS will appear on the command lines for the
dbToRecordTypeH, mkmf.pl, and dbExpand tools, and RELEASE_INCLUDES will
appear on compiler command lines. CAMAC_LIB and CAMAC_BIN can be used in
a Makeﬁle to deﬁne the location of needed scripts, executables, object
ﬁles, libraries or other ﬁles.

Deﬁnitions in conﬁgure/RELEASE can be overridden for a speciﬁc host and
target architectures by providing the appropriate ﬁle or ﬁles containing
overriding deﬁnitions.

.. code ::

        configure/RELEASE.<epics_host_arch>.Common
        configure/RELEASE.Common.<targetarch>
        configure/RELEASE.<epics_host_arch>.<targetarch>

For <top> directory structures created by makeBaseApp.pl, an EPICS base
perl script, convertRelease.pl can perform consistency checks for the
external <top> deﬁnitions in the RELEASE ﬁle and its includes as part of
the <top> level build. Consistancy checks are controlled by value of
CHECK_RELEASE which is deﬁned in <top>/conﬁgure/ CONFIG_SITE.
CHECK_RELEASE can be set to YES, NO or WARN, and if YES (the default
value), consistency checks will be performed. If CHECK_RELEASE is set to
WARN the build will continue even if conﬂicts are found.

Modifying conﬁgure/RELEASE\* ﬁles
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

You should always do a gnumake clean uninstall in the <top> directory
BEFORE adding, changing, or removing any deﬁnitions in the
conﬁgure/RELEASE\* ﬁles and then a gnumake at the top level AFTER making
the changes.

The ﬁle <top>/configure/RELEASE contains deﬁnitions for components
obtained from outside <top>. If you want to link to a new release of
anything deﬁned in the ﬁle do the following:

.. code ::

        cd <top>
        gnumake clean uninstall
        edit configure/RELEASE

change the relevant line(s) to point to the new release

.. code ::

        gnumake

All deﬁnitions in <top>/configure/RELEASE must result in complete path
deﬁnitions, i.e. relative path names are not permitted. If your site
could have multiple releases of base and other support <top> components
installed at once, these path deﬁnitions should contain a release number
as one of the components. However as the RELEASE ﬁle is read by gnumake,
it is permissible to use macro substitutions to deﬁne these pathnames,
for example:

.. code ::

        SUPPORT = /usr/local/iocapps/R3.14.9
        EPICS_BASE = $(SUPPORT)/base/3-14-9-asd1

OS Class speciﬁc deﬁnitions
^^^^^^^^^^^^^^^^^^^^^^^^^^^

Deﬁnitions in a Makeﬁle will apply to the host system (the platform on
which make is executed) and each system deﬁned by
CROSS_COMPILER_TARGET_ARCHS.

It is possible to limit the architectures for which a particular
deﬁnition is used. Most Makeﬁle deﬁnition names can be speciﬁed with an
appended underscore “\_” followed by an osclass name. If an \_<osclass>
is not speciﬁed, then the deﬁnition applies to the host and all
CROSS_COMPILER_TARGET_ARCHS systems. If an \_<osclass> is speciﬁed, then
the deﬁnition applies only to systems with the speciﬁed os class. A
Makeﬁle deﬁnition can also have an appended \_DEFAULT speciﬁcation. If
\_DEFAULT is appended, then the Makeﬁle deﬁnition will apply to all
systems that do not have an \_<osclass> speciﬁcation for that deﬁnition.
If a \_DEFAULT deﬁnition exists but should not apply to a particular
system OS Class, the value “-nil-” should be speciﬁed in the relevant
Makeﬁle deﬁnition.

Each system has an OS_CLASS deﬁnition in its
configure/os/CONFIG.Common.<arch> ﬁle. A few examples are:

   For vxWorks-\* targets <osclass> is vxWorks.
   For RTEMS-\* targets <osclass> is RTEMS.
   For solaris-\* targets <osclass> is solaris.
   For win32-\* targets <osclass> is WIN32.
   For linux-\* targets <osclass> is Linux.
   For darwin-\* targets <osclass> is Darwin.
   For aix-\* targets <osclass> is AIX.

For example the following Makeﬁle lines specify that product aaa should
be created for all systems. Product bbb should be created for systems
that do not have OS_CLASS deﬁned as solaris.

   PROD = aaa
   PROD_solaris = -nil-
   PROD_DEFAULT = bbb

Specifying T_A speciﬁc deﬁnitions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

It is possible for the user to limit the systems for which a particular
deﬁnition applies to speciﬁc target systems.

For example the following Makeﬁle lines specify that product aaa should
be created for all target architecture which allow IOC type products and
product bbb should be created only for the vxWorks-68040 and
vxWorks-ppc603 targets. Remember T_A is the build’s current target
architecture. so PROD_IOC has the bbb value only when the current built
target architecture is vwWorks-68040 or vxWorks-ppc603

   PROD_IOC = aaa
   VX_PROD_vxWorks-68040 = bbb
   VX_PROD_vxWorks-ppc603 = bbb
   PROD_IOC += VX_PROD_$(T_A)

Host and Ioc targets
^^^^^^^^^^^^^^^^^^^^

Build creates two type of makeﬁle targets: Host and Ioc. Host targets
are executables, object ﬁles, libraries, and scripts which are not part
of iocCore. Ioc targets are components of ioc libraries, executables,
object ﬁles, or iocsh scripts which will be run on an ioc.

Each supported target system has a VALID_BUILDS deﬁnition which speciﬁes
the type of makeﬁle targets it can support. This deﬁnition appears in
configure/os/CONFIG.Common.<arch> or configure/os/CONFIG.<arch>.<arch>
ﬁles.

   For vxWorks systems VALID_BUILDS is set to “Ioc”.
   For Unix type systems, VALID_BUILDS is set to “Host Ioc”.
   For RTEMS systems, VALID_BUILDS is set to “Ioc”.
   For WIN32 systems, VALID_BUILDS is set to “Host Ioc”.

In a Makeﬁle it is possible to limit the systems for which a particular
PROD, TESTPROD, LIBRARY, SCRIPTS, and OBJS is built. For example the
following Makeﬁle lines specify that product aaa should be created for
systems that support Host type builds. Product bbb should be created for
systems that support Ioc type builds. Product ccc should be created for
all target systems.

   PROD_HOST = aaa
   PROD_IOC = bbb
   PROD = ccc

These deﬁnitions can be further limited by specifying an appended
underscore “_” followed by an osclass or DEFAULT speciﬁcation.

User speciﬁc override deﬁnitions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

User speciﬁc override deﬁnitions are allowed in user created ﬁles in the
user’s <home>/configure subdirectory. These override deﬁnitions will be
used for builds in all <top> directory structures. The ﬁles must have
the following names.

.. code ::

        <home>/configure/CONFIG_USER
        <home>/configure/CONFIG_USER.<epics_host_arch>
        <home>/configure/CONFIG_USER.Common.<targetarch>
        <home>/configure/CONFIG_USER.<epics_host_arch>.<targetarch>

Makeﬁles
~~~~~~~~

Name
^^^^

The name of the makeﬁle in each directory must be Makeﬁle.

Included Files
^^^^^^^^^^^^^^

Makeﬁles normally include ﬁles from <top>/configure. Thus the makeﬁle
“inherits” rules and deﬁnitions from conﬁgure. The ﬁles in
<top>/configure may in turn include ﬁles from another <top>/configure.
This technique makes it possible to share make variables and even rules
across <top> directories.

Contents of Makeﬁles
^^^^^^^^^^^^^^^^^^^^

Makeﬁles in directories containing subdirectories
'''''''''''''''''''''''''''''''''''''''''''''''''

A Makeﬁle in this type of directory must deﬁne where <top> is relative
to this directory, include <top>/configure ﬁles, and specify the
subdirectories in the desired order of make execution. Running gnumake
in a directory with the following Makeﬁle lines will cause gnumake to be
executed in <dir1> ﬁrst and then <dir2>. The build rules do not allow a
Makeﬁle to specify both subdirectories and components to be built.

.. code ::

        TOP=../..
        include $(TOP)/configure/CONFIG
        DIRS += <dir1> <dir2>
        include $(TOP)/configure/RULES_DIRS
        

Makeﬁles in directories where components are to be built
''''''''''''''''''''''''''''''''''''''''''''''''''''''''

A Makeﬁle in this type of directory must deﬁne where <top> is relative
to this directory, include <top> conﬁgure ﬁles, and specify the target
component deﬁnitions. Optionally it may contain user deﬁned rules.
Running gnumake in a directory with this type of Makeﬁle will cause
gnumake to create an O.<arch> subdirectory and then execute gnumake to
build the deﬁned components in this subdirectory. It contains the
following lines:

.. code ::

        TOP=../../..
        include $(TOP)/configure/CONFIG
        <component definition lines>
        include $(TOP)/configure/RULES
        <optional rules definitions>

Simple Makeﬁle examples
^^^^^^^^^^^^^^^^^^^^^^^

Create an IOC type library named asIoc from the source ﬁle asDbLib.c and
install it into the $(INSTALL_LOCATION)/lib/<arch> directory.

.. code ::

        TOP=../../..
        include $(TOP)/configure/CONFIG
        LIBRARY_IOC += asIoc
        asIoc_SRCS += asDbLib.c
        include $(TOP)/configure/RULES

For each Host type target architecture, create an executable named
catest from the catest1.c and catest2.c source ﬁles linking with the
existing EPICS base ca and Com libraries, and then install the catest
executable into the $(INSTALL_LOCATION)/bin/<arch> directory.

.. code ::

        TOP=../../..
        include $(TOP)/configure/CONFIG
        PROD_HOST = catest
        catest_SRCS += catest1.c catest2.c
        catest_LIBS = ca Com
        include $(TOP)/configure/RULES

Make
~~~~

Make vs. gnumake
^^^^^^^^^^^^^^^^

EPICS provides an extensive set of make rules. These rules only work
with the GNU version of make, gnumake, which is supplied by the Free
Software Foundation. Thus, on most Unix systems, the native make will
not work. On some systems, e.g. Linux, GNU make may be the default. This
manual always uses gnumake in the examples.

Frequently used Make commands
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

NOTE: It is possible to invoke the following commands for a single
target architecture by appending <arch> to the target in the command.

The most frequently used make commands are:

gnumake
   This rebuilds and installs everything that is not up to date. NOTE:
   Executing gnumake without arguments is the same as “gnumake install”
gnumake help
   This command can be executed from the <top> directory only. This
   command prints a page describing the most frequently used make
   commands.
gnumake install
   This rebuilds and installs everything that is not up to date.

gnumake all
   This is the same as “gnumake install”.

gnumake buildInstall
   This is the same as “gnumake install”.

gnumake<arch>
   This rebuilds and installs everything that is not up to date ﬁrst for
   the host arch and then (if diﬀerent) for the speciﬁed target arch.

   NOTE: This is the same as “gnumake install.<arch>”

gnumake clean
   This can be used to save disk space by deleting the O.<arch>
   directories that gnumake will create, but does not remove any
   installed ﬁles from the bin, db, dbd etc. directories.
   “gnumake clean.<arch>” can be invoked to clean a single architecture.

gnumake archclean
   This command will remove the current build’s O.<arch> directories but
   not O.Common directory.

gnumake realclean
   This command will remove ALL the O.<arch> subdirectories (even those
   created by a gnumake from another EPICS_HOST_ARCH).

gnumake rebuild
   This is the same as “gnumake clean install”. If you are unsure about
   the state of the generated ﬁles in an application, just execute
   “gnumake rebuild”.

gnumake uninstall
   This command can be executed from the <top> directory only. It will
   remove everything installed by gnumake in the include, lib, bin, db,
   dbd, etc. directories.

gnumake realuninstall
   This command can be executed from the <top> directory only. It will
   remove all the install directories, include, lib, bin, db, dbd, etc.
gnumake distclean
   This command can be executed from the <top> directory only. It is the
   same as issuing both the realclean and realuninstall commands.

gnumake cvsclean
   This command can be executed from the <top> directory only. It
   removes cvs .#\* ﬁles in the make directory tree.

Make targets
^^^^^^^^^^^^

The following is a summary of targets that can be speciﬁed for gnumake:

-  <action>
-  <arch>
-  <action>.<arch>
-  <dir>
-  <dir>.<action>
-  <dir>.<arch>
-  <dir>.<action>.<arch>

where:

   <arch> is an architecture such as solaris-sparc, vxWorks-68040,
   win32-x86, etc.
   <action> is help, clean, realclean, distclean, inc, install, build,
   rebuild, buildInstall, realuninstall, or uninstall
   NOTE: help, uninstall, distclean, cvsclean, and realuninstall can
   only be speciﬁed at <top>.
   NOTE: realclean cannot be speciﬁed inside an O.<arch> subdirectory.
   <dir> is subdirectory name

Note: You can build using your os vendors’ native compiler and also
build using a supported alternate compiler in the same directory
structure because the executables and libraries will be created and
installed into separate directories (e.g bin/solaris-sparc and
bin/solaris-sparc-gnu). You can do this by changing your
EPICS_HOST_ARCH, environment variable between builds or by setting
EPICS_HOST_ARCH on the gnumake command line.

The build system ensures the host architecture is up to date before
building a cross-compiled target, thus Makeﬁles must be explicit in
deﬁning which architectures a component should be built for.

Header ﬁle dependencies
^^^^^^^^^^^^^^^^^^^^^^^

All product, test product, and library source ﬁles which appear in one
of the source ﬁle deﬁnitions (e.g. SRCS, PROD_SRCS, LIB_SRCS,
<prodname>_SRCS) will have their header ﬁle dependencies automatically
generated and included as part of the Makeﬁle.

Makeﬁle deﬁnitions
~~~~~~~~~~~~~~~~~~

The following components can be deﬁned in a Makeﬁle:

Source ﬁle directories
^^^^^^^^^^^^^^^^^^^^^^

Normally all product, test product, and library source ﬁles reside in
the same directory as the Makeﬁle. OS speciﬁc source ﬁles are allowed
and should reside in subdirectories os/<os_class> or os/posix or
os/default.

The build rules also allow source ﬁles to reside in subdirectories of
the current Makeﬁle directory (src directory). For each subdirectory
<dir> containing source ﬁles add the SRC_DIRS deﬁnition.

.. code ::

        SRC_DIRS += <dir>

where <dir> is a relative path deﬁnition. An example of SRC_DIRS is

.. code ::

        SRC_DIRS += ../dir1 ../dir2

The directory search order for the above deﬁnition is

.. code ::

        .
        ../os/$(OS_CLASS) ../os/posix ../os/default
        ../dir1/os/$(OS_CLASS) ../dir1/os/posix ../dir1/os/default
        ../dir2/os/$(OS_CLASS) ../dir2/os/posix ../dir2/os/default
        ..
        ../dir1 ../dir2

where the build directory O.<arch> is . and the src directory is ...

Posix C source code
^^^^^^^^^^^^^^^^^^^

The epics base conﬁg ﬁles assume posix source code and deﬁne POSIX to be
YES as the default. Individual Makeﬁles can override this by setting
POSIX to NO. Source code ﬁles may have the suﬃx .c, .cc, .cpp, or .C.

Breakpoint Tables
^^^^^^^^^^^^^^^^^

For each breakpoint table dbd ﬁle, bpt<table name>.dbd, to be created
from an existing bpt<table name>.data ﬁle, add the deﬁnition

.. code ::

        DBD += bpt<table name>.dbd

to the Makeﬁle. The following Makeﬁle will create a bptTypeJdegC.dbd ﬁle
from an existing bptTypeJdegC.data ﬁle using the EPICS base utility
program makeBpt and install the new dbd ﬁle into the
$(INSTALL_LOCATION)/dbd directory.

.. code ::

        TOP=../../..
        include $(TOP)/configure/CONFIG
        DBD += bptTypeJdegC.dbd
        include $(TOP)/configure/RULES

Record Type Deﬁnitions
^^^^^^^^^^^^^^^^^^^^^^

For each new record type, the following deﬁnition should be added to the
makeﬁle:


        DBDINC += <rectype>Record

A <rectype>Record.h header ﬁle will be created from an existing
<rectype>Record.dbd ﬁle using the EPICS base utility program
dbToRecordTypeH. This header will be installed into the
$(INSTALL_LOCATION)/include directory and the dbd ﬁle will be installed
into the $(INSTALL_LOCATION)/dbd directory.

The following Makeﬁle will create xxxRecord.h from an existing
xxxRecord.dbd ﬁle, install xxxRecord.h into $(INSTALL_LOCATION)/include,
and install xxxRecord.dbd into $(INSTALL_LOCATION)/dbd.

.. code :

        TOP=../../..
        include $(TOP)/configure/CONFIG
        DBDINC += xxxRecord
        include $(TOP)/configure/RULES

Menus
^^^^^

If a menu menu<name>.dbd ﬁle is present, then add the following
deﬁnition:

.. code ::

        DBDINC += menu<name>.h

The header ﬁle, menu<name>.h will be created from the existing
menu<name>.dbd ﬁle using the EPICS base utility program dbToMenuH and
installed into the $(INSTALL_LOCATION)/include directory and the menu
dbd ﬁle will be installed into $(INSTALL_LOCATION)/dbd.

The following Makeﬁle will create a menuConvert.h ﬁle from an existing
menuConvert.dbd ﬁle and install menuConvert.h into
$(INSTALL_LOCATION)/include and menuConvert.dbd into
$(INSTALL_LOCATION)/dbd.

.. code ::

        TOP=../../..
        include $(TOP)/configure/CONFIG
        DBDINC = menuConvert.h
        include $(TOP)/configure/RULES

Expanded Database Deﬁnition Files
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Database deﬁnition include ﬁles named <name>Include.dbd containing
includes for other database deﬁnition ﬁles can be expanded by the EPICS
base utility program dbExpand into a created <name>.dbd ﬁle and the
<name>.dbd ﬁle installed into $(INSTALL_LOCATION)/dbd. The following
variables control the process:

.. code ::

        DBD += <name>.dbd
        USR_DBDFLAGS += -I <include path>
        USR_DBDFLAGS += -S <macro substitutions>
        <name>_DBD += <file1>.dbd <file2>.dbd ...

where

.. code ::

        DBD += <name>.dbd

is the name of the output dbd ﬁle to contain the expanded deﬁnitions. It
is created by expanding an existing or build created <name>Include.dbd
ﬁle and then copied into $(INSTALL_LOCATION)/dbd.

An example of a ﬁle to be expanded is exampleInclude.dbd containing the
following lines

.. code ::

        include "base.dbd"
        include "xxxRecord.dbd"
        device(xxx,CONSTANT,devXxxSoft,"SoftChannel")

USR_DBDFLAGS deﬁnes optional ﬂags for dbExpand. Currently only an
include path (-I <path>) and macro substitution (-S <substitution>) are
supported. The include paths for EPICS base/dbd, and other <top>/dbd
directories will automatically be added during the build if the <top>
names are speciﬁed in the conﬁgure/RELEASE ﬁle.

A database deﬁnition include ﬁle named <name>Include.dbd containing
includes for other database deﬁnition ﬁles can be created from a
<name>_DBD deﬁnition. The lines

.. code ::

        DBD += <name>.dbd
        <name>_DBD += <file1>.dbd <file2>.dbd ...

will create an expanded dbd ﬁle <name>.dbd by ﬁrst creating a
<name>Include.dbd. For each ﬁlename in the <name>_DBD deﬁnition, the
created <name>Include.dbd will contain an include statement for that
ﬁlename. Then the expanded DBD ﬁle is generated from the created
<name>Include.dbd ﬁle and installed into $(INSTALL_LOCATION)/ dbd.

The following Makeﬁle will create an expanded dbd ﬁle named example.dbd
from an existing exampleInclude.dbd ﬁle and then install example.dbd
into the $(INSTALL_LOCATION)/dbd directory.

.. code ::

        TOP=../../..
        include $(TOP)/configure/CONFIG
        DBD += exampleApp.dbd
        include $(TOP)/configure/RULES

The following Makeﬁle will create an exampleInclude.dbd ﬁle from the
example_DBD deﬁnition then expand it to create an expanded dbd ﬁle,
example.dbd, and install example.dbd into the $(INSTALL_LOCATION)/dbd
directory.

.. code ::

        TOP=../../..
        include $(TOP)/configure/CONFIG
        DBD += example.dbd
        example_DBD += base.dbd xxxRecord.dbd xxxSupport.dbd
        include $(TOP)/configure/RULES

The created exampleInclude.dbd ﬁle will contain the following lines

.. code ::

        include "base.dbd"
        include "xxxRecord.dbd"
        include "xxxSupport.dbd"

Registering Support Routines for Expanded Database Deﬁnition Files
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A source ﬁle which registers simple static variables and
record/device/driver support routines with iocsh can be created. The
list of variables and routines to register is obtained from lines in an
existing dbd ﬁle.

The following line in a Makeﬁle will result in
<name>_registerRecordDeviceDriver.cpp being created, compiled, and
linked into <prodname>. It requires that the ﬁle <name>.dbd exist or can
be created using other make rules.

.. code ::

        <prodname>_SRCS += <name>_registerRecordDeviceDriver.cpp

An example of registering the variable mySubDebug and the routines
mySubInit and mySubProcess is <name>.dbd containg the following lines

.. code ::

        variable(mySubDebug)
        function(mySubInit)
        function(mySubProcess)

Database Deﬁnition Files
^^^^^^^^^^^^^^^^^^^^^^^^

The following line installs the existing named dbd ﬁles into
$(INSTALL_LOCATION)/dbd without expansion.

.. code ::

        DBD += <name>.dbd

DBD install ﬁles
^^^^^^^^^^^^^^^^^^^^^^

Deﬁnitions of the form:

.. code ::

        DBD_INSTALLS += <name>

result in ﬁles being installed to the $(INSTALL_LOCATION/dbd directory.
The ﬁle <name> can appear with or without a directory preﬁx. If the ﬁle
has a directory preﬁx e.g. $(APPNAME)/dbd/, it is copied from the
speciﬁed location. If a directory preﬁx is not present, make will look
in the current source directory for the ﬁle.

Database Files
^^^^^^^^^^^^^^

For most databases just the name of the database has to be speciﬁed.
Make will ﬁgure out how to generate the ﬁle:

.. code ::

        DB += xxx.db

generates xxx.db depending on which source ﬁles exist and installs it
into $(INSTALL_LOCATION)/db.

A <name>.db database ﬁle will be created from an optional
<name>.template ﬁle and/or an optional <name>.substitutions ﬁle, If the
substitution ﬁle exists but the template ﬁle is not named
<name>.template, the template ﬁle name can be speciﬁed as

.. code ::

        <name>_TEMPLATE = <template file name>

A ⋆<nn>.db database ﬁle will be created from a \*.template and a
⋆<nn>.substitutions ﬁle, (where nn is an optional index number).

If a <name> substitutions ﬁle contains “ﬁle” references to other input
ﬁles, these referenced ﬁles are made dependencies of the created
<name>.db by the makeDbDepends.pl perl tool.

The Macro Substitutions and Include tool, msi, will be used to generate
the database, and msi must either be in your path or you must redeﬁne
MSI as the full path name to the msi binary in a RELEASE ﬁle or Makeﬁle.
An example MSI deﬁnition is

.. code ::

        MSI = /usr/local/epics/extensions/bin/${EPICS_HOST_ARCH}/msi

Template ﬁles <name>.template, and db ﬁles, <name>.db, will be created
from an edf ﬁle <name>.edf and an <name>.edf ﬁle will be created from a
<name>.sch ﬁle.

Template and substitution ﬁles can be installed.

.. code ::

        DB += xxx.template xxx.substitutions

generates and installs these ﬁles. If one or more xxx.substitutions ﬁles
are to be created by script, the script name must be placed in the
CREATESUBSTITUTIONS variable (e.g. CREATESUBSTITUTIONS=mySubst.pl). This
script will be executed by gnumake with the preﬁx of the substitution
ﬁle name to be generated as its argument. If (and only if) there are
script generated substitutions ﬁles, the preﬁx of any inﬂated database’s
name may not equal the preﬁx of the name of any template used within the
directory.

DB install ﬁles
^^^^^^^^^^^^^^^

Deﬁnitions of the form:

.. code ::

        DB_INSTALLS += <name>

result in ﬁles being installed to the $(INSTALL_LOCATION/db directory.
The ﬁle <name> can appear with or without a directory preﬁx. If the ﬁle
has a directory preﬁx e.g. $(APPNAME)/db/, it is copied from the
speciﬁed location. If a directory preﬁx is not present, make will look
in the current source directory for the ﬁle.

Compile and link command options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Any of the following can be speciﬁed:

Options for all compile/link commands.
''''''''''''''''''''''''''''''''''''''

These deﬁnitions will apply to all compiler and linker targets.

   USR_INCLUDES += -I<name>

   header ﬁle directories each preﬁxed by a “-I”.

   USR_INCLUDES_<osclass> += -I<name>

   os speciﬁc header ﬁle directories each preﬁxed by a “-I”.

   USR_INCLUDES_DEFAULT += -I<name>

   header ﬁle directories each preﬁxed by “-I” for any arch that does
   not have a USR_INCLUDE_<osclass> deﬁnition

   USR_CFLAGS += <c flags>

   C compiler options.

   USR_CFLAGS_<osclass> += <c flags>

   os speciﬁc C compiler options.

   USR_CFLAGS_<arch> += <c flags>

   target architecture speciﬁc C compiler options.

   USR_CFLAGS_DEFAULT += <c flags>

   C compiler options for any arch that does not have a
   USR_CFLAGS_<osclass> deﬁnition

   USR_CXXFLAGS += <c++ flags>

   C++ compiler options.

   USR_CXXFLAGS_<osclass> += <c++ flags>

   C++ compiler options for the speciﬁed osclass.

   USR_CXXFLAGS_<arch> += <c++ flags>

   C++ compiler options for the speciﬁed target architecture.

   USR_CXXFLAGS_DEFAULT += <c++ flags>

   C++ compiler options for any arch that does not have a
   USR_CXXFLAGS_<osclass> deﬁnition

   USR_CPPFLAGS += <preprocessor flags>

   C preprocessor options.

   USR_CPPFLAGS_<osclass> += <preprocessor flags>

   os speciﬁc C preprocessor options.

   USR_CPPFLAGS_<arch> += <preprocessor flags>

   target architecture speciﬁc C preprocessor options.

   USR_CPPFLAGS_DEFAULT += <preprocessor flags>

   C preprocessor options for any arch that does not have a
   USR_CPPFLAGS_<osclass> deﬁnition

   USR_LDFLAGS += <linker flags>

   linker options.

   USR_LDFLAGS_<osclass> += <linker flags>

   os speciﬁc linker options.

   USR_LDFLAGS_DEFAULT += <linker flags>

   linker options for any arch that does not have a
   USR_LDFLAGS_<osclass> deﬁnition

Options for a target speciﬁc compile/link command.
''''''''''''''''''''''''''''''''''''''''''''''''''

   <name>_INCLUDES += -I<name>

   header ﬁle directories each preﬁxed by a “-I”.

   <name>_INCLUDES_<osclass> += -I<name>

   os speciﬁc header ﬁle directories each preﬁxed by a “-I”.

   <name>_INCLUDES_<T_A> += -I<name>

   target architecture speciﬁc header ﬁle directories each preﬁxed by a
   “-I”.

   <name>_CFLAGS += <c flags>

   c compiler options.

   <name>_CFLAGS_<osclass> += <c flags>

   os speciﬁc c compiler options.

   <name>_CFLAGS_<T_A> += <c flags>

   target architecture speciﬁc c compiler options.

   <name>_CXXFLAGS += <c++ flags>

   c++ compiler options.

   <name>_CXXFLAGS_<osclass> += <c++ flags>

   c++ compiler options for the speciﬁed osclass.

   <name>_CXXFLAGS_<T_A> += <c++ flags>

   c++ compiler options for the speciﬁed target architecture.

   <name>_CPPFLAGS += <preprocessor flags>

   c preprocessor options.

   <name>_CPPFLAGS_<osclass> += <preprocessor flags>

   os speciﬁc c preprocessor options.

   <name>_CPPFLAGS_<T_A> += <preprocessor flags>

   target architecture speciﬁc c preprocessor options.

   <name>_LDFLAGS += <linker flags>

   linker options.

   <name>_LDFLAGS_<osclass> += <linker flags>

   os speciﬁc linker options.

Libraries
^^^^^^^^^

A library is created and installed into $(INSTALL_LOCATION)/lib/<arch>
by specifying its name and the name of the object and/or source ﬁles
containing code for the library. An object or source ﬁle name can appear
with or without a directory preﬁx. If the ﬁle name has a directory preﬁx
e.g. $(EPICS_BASE_BIN), it is taken from the speciﬁed location. If a
directory preﬁx is not present, make will ﬁrst look in the source
directories for a ﬁle with the speciﬁed name and next try to create the
ﬁle using existing conﬁgure rules. A library ﬁlename preﬁx may be
prepended to the library name when the ﬁle is created. For Unix type
systems and vxWorks the library preﬁx is lib and there is no preﬁx for
WIN32. Also a library suﬃx appropriate for the library type and target
arch (e.g. .a, .so, .lib, .dll) will be appended to the ﬁlename when the
ﬁle is created.

vxWorks and RTEMS Note: Only archive libraries are created.

Shared libraries Note: Shared libraries can be built for any or all HOST
type architectures. The deﬁnition of SHARED_LIBRARIES (YES/NO) in
base/conﬁgure/CONFIG_SITE determines whether shared or archive libraries
will be built. When SHARED_LIBRARIES is YES, both archive and shared
libraries are built. This deﬁnition can be overridden for a speciﬁc arch
in an configure/os/CONFIG_SITE.<arch>.Common ﬁle.,The default deﬁnition
for SHARED_LIBRARIES in the EPICS base distribution ﬁle is YES for all
host systems.

| win32 Note: An object library ﬁle is created when SHARED_LIBRARIES=NO,
  <name>.lib which is installed into $(INSTALL_LOCATION)/lib/<arch>. Two
  library ﬁles are created when SHARED_LIBRARIES=YES, <name>.lib, an
  import library for DLLs, which is installed into
  $(INSTALL_LOCATION)/lib/<arch>, and <name>.dll which is installed into
  $(INSTALL_LOCATION)/bin/<arch>. (Warning: The ﬁle <name>.lib will only
  be created by the build if there are exported symbols from the
  library.) If SHARED_LIBRARIES=YES, the directory
| $(INSTALL_LOCATION)/bin/<arch> must be in the user’s path during
  builds to allow invoking executables which were linked with shared
  libraries. NOTE: the <name>.lib ﬁles are diﬀerent for shared and
  nonshared builds.

Specifying the library name.
''''''''''''''''''''''''''''

Any of the following can be speciﬁed:

   LIBRARY += <name>

   A library will be created for every target arch.

   LIBRARY_<osclass> += <name>

   Library <name> will be created for all archs of the speciﬁed osclass.

   LIBRARY_DEFAULT += <name>

   Library <name> will be created for any arch that does not have a
   LIBRARY_<osclass> deﬁnition

   LIBRARY_IOC += <name>

   Library <name> will be created for IOC type archs.

   LIBRARY_IOC_<osclass> += <name>

   Library <name> will be created for all IOC type archs of the speciﬁed
   osclass.

   LIBRARY_IOC_DEFAULT += <name>

   Library <name> will be created for any IOC type arch that does not
   have a LIBRARY_IOC_<osclass> deﬁnition

   LIBRARY_HOST += <name>

   Library <name> will be created for HOST type archs.

   LIBRARY_HOST_<osclass> += <name>

   Library <name> will be created for all HOST type archs of the
   speciﬁed osclass.

   LIBRARY_HOST_DEFAULT += <name>

   Library <name> will be created for any HOST type arch that does not
   have a LIBRARY_HOST_<osclass> deﬁnition

Specifying library source ﬁle names
'''''''''''''''''''''''''''''''''''

Source ﬁle names, which must have a suﬃx, are deﬁned as follows:

   SRCS += <name>

   Source ﬁles will be used for all deﬁned libraries and products.

   SRCS_<osclass> += <name>

   Source ﬁles will be used for all deﬁned libraries and products for
   all archs of the speciﬁed osclass.

   SRCS_DEFAULT += <name>

   Source ﬁles will be used for all deﬁned libraries and products for
   any arch that does not have a SRCS_<osclass> deﬁnition

LIBSRCS and LIB_SRCS have the same meaning. LIBSRCS is deprecated, but
retained for R3.13 compatibility.

   LIBSRCS += <name>

   Source ﬁles will be used for all deﬁned libraries.

   LIBSRCS_<osclass> += <name>

   Source ﬁles will be used for all deﬁned libraries for all archs of
   the speciﬁed osclass.

   LIBSRCS_DEFAULT += <name>

   Source ﬁles will be used for all deﬁned libraries for any arch that
   does not have a LIBSRCS_<osclass> deﬁnition

   USR_SRCS += <name>

   Source ﬁles will be used for all deﬁned products and libraries.

   USR_SRCS_<osclass> += <name>

   Source ﬁles will be used for all deﬁned products and libraries for
   all archs of the speciﬁed osclass.

   USR_SRCS_DEFAULT += <name>

   Source ﬁles will be used for all deﬁned products and libraries for
   any arch that does not have a USR_SRCS_<osclass> deﬁnition

   LIB_SRCS += <name>

   Source ﬁles will be used for all libraries.

   LIB_SRCS_<osclass> += <name>

   Source ﬁles will be used for all deﬁned libraries for all archs of
   the speciﬁed osclass.

   LIB_SRCS_DEFAULT += <name>

   Source ﬁles will be used for all deﬁned libraries for any arch that
   does not have a LIB_SRCS_<osclass> deﬁnition

   <libname>_SRCS += <name>

   Source ﬁles will be used for the named library.

   <libname>_SRCS_<osclass> += <name>

   Source ﬁles will be used for named library for all archs of the
   speciﬁed osclass.

   <libname>_SRCS_DEFAULT += <name>

   Source ﬁles will be used for named library for any arch that does not
   have a <libname>_SRCS_<osclass> deﬁnition

Specifying library object ﬁle names
'''''''''''''''''''''''''''''''''''

Library object ﬁle names should only be speciﬁed for object ﬁles which
will not be built in the current directory. For object ﬁles built in the
current directory, library source ﬁle names should be speciﬁed. See
Specifying Library Source File Names above.

Object ﬁles which have ﬁlename with a “.o” or “.obj” suﬃx are deﬁned as
follows and can be speciﬁed without the suﬃx but should have the
directory preﬁx

   USR_OBJS += <name>

   Object ﬁles will be used in builds of all products and libraries

   USR_OBJS_<osclass> += <name>

   Object ﬁles will be used in builds of all products and libraries for
   archs with the speciﬁed osclass.

   USR_OBJS_DEFAULT += <name>

   Object ﬁles will be used in builds of all products and libraries for
   archs without a USR_OBJS_<osclass> deﬁnition speciﬁed.

   LIB_OBJS += <name>

   Object ﬁles will be used in builds of all libraries.

   LIB_OBJS_<osclass> += <name>

   Object ﬁles will be used in builds of all libraries for archs of the
   speciﬁed osclass.

   LIB_OBJS_DEFAULT += <name>

   Object ﬁles will be used in builds of all libraries for archs without
   a LIB_OBJS_<osclass> deﬁnition speciﬁed.

   <libname>_OBJS += <name>

   Object ﬁles will be used for all builds of the named library)

   <libname>_OBJS_<osclass> += <name>

   Object ﬁles will be used in builds of the library for archs with the
   speciﬁed osclass.

   <libname>_OBJS_DEFAULT += <name>

   Object ﬁles will be used in builds of the library for archs without a
   <libname>_OBJS_<osclass> deﬁnition speciﬁed.

Combined object ﬁles, from R3.13 built modules and applications which
have ﬁle names that do not include a “.o” or ”.obj” suﬃx (e.g. xyzLib)
are deﬁned as follows:

   USR_OBJLIBS += <name>

   Combined object ﬁles will be used in builds of all libraries and
   products.

   USR_OBJLIBS_<osclass> += <name>

   Combined object ﬁles will be used in builds of all libraries and
   products for archs of the speciﬁed osclass.

   USR_OBJLIBS_DEFAULT += <name>

   Combined object ﬁles will be used in builds of all libraries and
   products for archs without a USR_OBJLIBS_<osclass> deﬁnition
   speciﬁed.

   LIB_OBJLIBS += <name>

   Combined object ﬁles will be used in builds of all libraries.

   LIB_OBJLIBS_<osclass> += <name>

   Combined object ﬁles will be used in builds of all libraries for
   archs of the speciﬁed osclass.

   LIB_OBJLIBS_DEFAULT += <name>

   Combined object ﬁles will be used in builds of all libraries for
   archs without a LIB_OBJLIBS_<osclass> deﬁnition speciﬁed.

   <libname>_OBJLIBS += <name>

   Combined object ﬁles will be used for all builds of the named
   library.

   <libname>_OBJLIBS_<osclass> += <name>

   Combined object ﬁles will be used in builds of the library for archs
   with the speciﬁed osclass.

   <libname>_OBJLIBS_DEFAULT += <name>

   Combined object ﬁles will be used in builds of the library for archs
   without a <libname>_OBJLIBS_<osclass> deﬁnition speciﬁed.

   <libname>_LDOBJS += <name>

   Combined object ﬁles will be used for all builds of the named
   library. (deprecated)

   <libname>_LDOBJS_<osclass> += <name>

   Combined object ﬁles will be used in builds of the library for archs
   with the speciﬁed osclass. (deprecated)

   <libname>_LDOBJS_DEFAULT += <name>

   Combined object ﬁles will be used in builds of the library for archs
   without a <libname>_LDOBJS_<osclass> deﬁnition speciﬁed. (deprecated)

4.6.13.4 LIBOBJS deﬁnitions
'''''''''''''''''''''''''''

Previous versions of epics (3.13 and before) accepted deﬁnitions like:

   LIBOBJS += $<support>_BIN)/xxx.o

   These are gathered together in ﬁles such as baseLIBOBJS. To use such
   deﬁnitions include the lines:

   -include ../baseLIBOBJS
   <libname>_OBJS += $(LIBOBJS)

   Note: vxWorks applications created by makeBaseApp.pl from 3.14 Base
   releases no longer have a ﬁle named baseLIBOBJS. Base record and
   device support now exists in archive libraries.

Specifying dependant libraries to be linked when creating a library
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

For each library name speciﬁed which is not a system library nor a
library from an EPICS top deﬁned in the conﬁgure/ RELEASE ﬁle, a
<name>_DIR deﬁnition must be present in the Makeﬁle to specify the
location of the library.

Library names, which must not have a directory and “lib” preﬁx nor a
suﬃx, are deﬁned as follows:

   LIB_LIBS += <name>

   Libraries to be used when linking all deﬁned libraries.

   LIB_LIBS_<osclass> += <name>

   Libraries to be used or all archs of the speciﬁed osclass when
   linking all deﬁned libraries.

   LIB_LIBS_DEFAULT += <name>

   Libraries to be used for any arch that does not have a
   LIB_LIBS_<osclass> deﬁnition when linking all deﬁned libraries.

   USR_LIBS += <name>

   Libraries to be used when linking all deﬁned products and libraries.

   USR_LIBS_<osclass> += <name>

   Libraries to be used or all archs of the speciﬁed osclasswhen linking
   all deﬁned products and libraries.

   USR_LIBS_DEFAULT += <name>

   Libraries to be used for any arch that does not have a
   USR_LIBS_<osclass> deﬁnition when linking all deﬁned products and
   libraries.

   <libname>_LIBS += <name>

   Libraries to be used for linking the named library.

   <libname>_LIBS_<osclass> += <name>

   Libraries will be used for all archs of the speciﬁed osclass for
   linking named library.

   <libname>_LIBS_DEFAULT += <name>

   Libraries to be used for any arch that does not have a
   <libname>_LIBS_<osclass> deﬁnition when linking named library.

   <libname>_SYS_LIBS += <name>

   System libraries to be used for linking the named library.

   <libname>_SYS_LIBS_<osclass> += <name>

   System libraries will be used for all archs of the speciﬁed osclass
   for linking named library.

   <libname>_SYS_LIBS_DEFAULT += <name>

   System libraries to be used for any arch that does not have a
   <libname>_LIBS_<osclass> deﬁnition when linking named library.

The order of dependant libraries
''''''''''''''''''''''''''''''''

Dependant library names appear in the following order on a library link
line:

#. <libname>_LIBS
#. <libname>_LIBS_<osclass> or <libname>_LIBS_DEFAULT
#. LIB_LIBS
#. LIB_LIBS_<osclass> or LIB_LIBS_DEFAULT
#. USR_LIBS
#. USR_LIBS_<osclass> or USR_LIBS_DEFAULT
#. <libname>_SYS_LIBS
#. <libname>_SYS_LIBS_<osclass> or <libname>_SYS_LIBS_DEFAULT
#. LIB_SYS_LIBS
#. LIB_SYS_LIBS_<osclass> or LIB_SYS_LIBS_DEFAULT
#. USR_SYS_LIBS
#. USR_SYS_LIBS_<osclass> or USR_SYS_LIBS_DEFAULT

Specifying library DLL ﬁle names (deprecated)
'''''''''''''''''''''''''''''''''''''''''''''

WIN32 libraries require all external references to be resolved, so if a
library contains references to items in other DLL libraries, these DLL
library names must be speciﬁed (without directory preﬁx and without
“.dll” suﬃx) as follows:

   DLL_LIBS += <name>

   These DLLs will be used for all libraries.

   <libname>_DLL_LIBS += <name>

   These DLLs will be used for the named library.

   Each <name> must have a corresponding <name>_DIR deﬁnition specifying
   its directory location.

Specifying shared library version number
''''''''''''''''''''''''''''''''''''''''

A library version number can be speciﬁed when creating a shared library
as follows:

   SHRLIB_VERSION = <version>

| On WIN32 this results in /version:$(SHRLIB_VERSION) link option. On
  Unix type hosts .$(SHRLIB_VERSION) is appended to the shared library
  name and a symbolic link is created for the unversioned library name.
| $(EPICS_VERSION).$(EPICS_REVISION) is the default value for
  SHRLIB_VERSION.

Library example:
''''''''''''''''

.. code ::

            LIBRARY_vxWorks += vxWorksOnly
            LIBRARY_IOC += iocOnly
            LIBRARY_HOST += hostOnly
            LIBRARY += all
            vxWorksOnly_OBJS += $(LINAC_BIN)/vxOnly1
            vxWorksOnly_SRCS += vxOnly2.c
            iocOnly_OBJS += $(LINAC_BIN)/iocOnly1
            iocOnly_SRCS += iocOnly2.cpp
            hostOnly_OBJS +=  $(LINAC_BIN)/host1
            all_OBJS += $(LINAC_BIN)/all1
            all_SRCS += all2.cpp

If the architectures deﬁned in <top>/configure are solaris-sparc and
vxWorks-68040 and LINAC is deﬁned in the <top>/configure/RELEASE ﬁle,
then the following libraries will be created:

-  $(INSTALL_LOCATION)/bin/vxWork-68040/libvxWorksOnly.a :
   $(LINAC_BIN)/vxOnly1.o vxOnly2.o
-  $(INSTALL_LOCATION)/bin/vxWork-68040/libiocOnly.a :
   $(LINAC_BIN/iocOnly1.o iocOnly2.o
-  $(INSTALL_LOCATION)/lib/solaris-sparc/libiocOnly.a :
   $(LINAC_BIN)/iocOnly1.o iocOnly2.o
-  $(INSTALL_LOCATION)/lib/solaris-sparc/libhostOnly.a :
   $(LINAC_BIN)/host1.o
-  $(INSTALL_LOCATION)/bin/vxWork-68040/liball.a : $(LINAC_BIN)/all1.o
   all2.o
-  $(INSTALL_LOCATION)/lib/solaris-sparc/liball.a : $(LINAC_BIN)/all1.o
   all2.o

Loadable libraries
^^^^^^^^^^^^^^^^^^

Loadable libraries are regular libraries which are not required to have
all symbols resolved during the build. The intent is to create dynamic
plugins so no archive library is created. Source ﬁle, object ﬁles, and
dependant libraries are speciﬁed in exactly the same way as for regular
libraries.

Any of the following can be speciﬁed:

   LOADABLE_LIBRARY += <name>

   The <name> loadable library will be created for every target arch.

   LOADABLE_LIBRARY_<osclass> += <name>

   Loadable library <name> will be created for all archs of the speciﬁed
   osclass.

   item LOADABLE_LIBRARY_DEFAULT += <name>

   Loadable library <name> will be created for any arch that does not
   have a LOADABLE_LIBRARY_<osclass> deﬁnition

   LOADABLE_LIBRARY_HOST += <name>

   Loadable library <name> will be created for HOST type archs.

   LOADABLE_LIBRARY_HOST_<osclass> += <name>

   Loadable library <name> will be created for all HOST type archs of
   the speciﬁed osclass.

   LOADABLE_LIBRARY_HOST_DEFAULT += <name>

   | Loadable library <name> will be created for any HOST type arch that
     does not have a
   | LOADABLE_LIBRARY_HOST_<osclass> deﬁnition

Combined object libraries (VxWorks only)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Combined object libraries are regular combined object ﬁles which have
been created by linking together multiple object ﬁles. OBJLIB
speciﬁcations in the Makeﬁle create a combined object ﬁle and a
corresponding munch ﬁle for vxWorks target architectures only. Combined
object libraries have a Library.o suﬃx. It is possible to generate and
install combined object libraries by using deﬁnitions:

.. code ::

        OBJLIB += <name>
        OBJLIB_vxWorks += <name>
        OBJLIB_SRCS += <srcname1> <srcname2> ...
        OBJLIB_OBJS += <objname1> <objname2> ...

These deﬁnitions result in the combined object ﬁle <name>Library.o and
its corresponding <name>Library.munch munch ﬁle being built for each
vxWorks architecture from source/object ﬁles in the
OBJLIB_SRCS/OBJLIB_OBJS deﬁnitions. The combined object ﬁle and the
munch ﬁle are installed into the $(INSTALL_LOCATION)/bin/<arch>
directory.

Object Files
^^^^^^^^^^^^

It is possible to generate and install object ﬁles by using deﬁnitions:

   OBJS += <name>
   OBJS_<osclass> += <name>
   OBJS_DEFAULT += <name>
   OBJS_IOC += <name>
   OBJS_IOC_<osclass> += <name>
   OBJS_IOC_DEFAULT += <name>
   OBJS_HOST += <name>
   OBJS_HOST_<osclass> += <name>
   OBJS_HOST_DEFAULT += <name>

These will cause the speciﬁed ﬁle to be generated from an existing
source ﬁle for the appropriate target arch and installed into
$(INSTALL_LOCATION)/bin/<arch>.

The following Makeﬁle will create the abc object ﬁle for all target
architectures, the def object ﬁle for all target archs except vxWorks,
and the xyz object ﬁle only for the vxWorks target architecture and
install them into the appropriate $(INSTALL_LOCATION)/bin/<arch>
directory.

.. code ::

        TOP=../../..
        include $(TOP)/configure/CONFIG
        OBJS += abc
        OBJS_vxWorks += xyz
        OBJS_DEFAULT += def
        include $(TOP)/configure/RULES

State Notation Programs
^^^^^^^^^^^^^^^^^^^^^^^

A state notation program ﬁle can be speciﬁed as a source ﬁle in any SRC
deﬁnition. For example:

.. code ::

        <prodname>_SRCS += <name>.stt

The state notation compiler snc will generate the ﬁle <name>.c from the
state notation program ﬁle <name>.stt. This C ﬁle is compiled and the
resulting object ﬁle is linked into the <prodname> product.

A state notation source ﬁle must have the extension .st or .stt. The .st
ﬁle is passed through the C preprocessor before it is processed by snc.

If you have state notation language source ﬁles (.stt and .st ﬁles), the
module seq must be built and SNCSEQ deﬁned in the RELEASE ﬁle. If the
state notation language source ﬁles require c preprocessing before
conversion to c source (.st ﬁles), gcc must be in your path.

Scripts, etc.
^^^^^^^^^^^^^

Any of the following can be speciﬁed:

   SCRIPTS += <name>

   A script will be installed from the src directory to the
   $(INSTALL_LOCATION)/bin/<arch> directories.

   SCRIPTS_<osclass> += <name>

   Script <name> will be installed for all archs of the speciﬁed
   osclass.

   SCRIPTS_DEFAULT += <name>

   Script <name> will be installed for any arch that does not have a
   SCRIPTS_<osclass> deﬁnition

   SCRIPTS_IOC += <name>

   Script <name> will be installed for IOC type archs.

   SCRIPTS_IOC_<osclass> += <name>

   Script <name> will be installed for all IOC type archs of the
   speciﬁed osclass.

   SCRIPTS_IOC_DEFAULT += <name>

   Script <name> will be installed for any IOC type arch that does not
   have a SCRIPTS_IOC_<osclass> deﬁnition

   SCRIPTS_HOST += <name>

   Script <name> will be installed for HOST type archs.

   SCRIPTS_HOST_<osclass> += <name>

   Script <name> will be installed for all HOST type archs of the
   speciﬁed osclass.

   SCRIPTS_HOST_DEFAULT += <name>

   Script <name> will be installed for any HOST type arch that does not
   have a SCRIPTS_HOST_<osclass> deﬁnition

Deﬁnitions of the form:

.. container:: verbatim
   :name: verbatim-59

   .. container:: fancyvrb
      :name: fancyvrb59

        SCRIPTS_<osclass> += <name1>
        SCRIPTS_DEFAULT += <name2>

results in the <name1> script being installed from the src directory to
the $(INSTALL_LOCATION)/bin/<arch> directories for all target archs of
the speciﬁed os class <osclass> and the <name2> script installed into
the $(INSTALL_LOCATION)/bin/<arch> directories of all other target
archs.

Include ﬁles
^^^^^^^^^^^^

A deﬁnition of the form:

.. code ::

        INC += <name>.h

results in ﬁle <name>.h being installed or created and installed to the
$(INSTALL_LOCATION)/include directory.

Deﬁnitions of the form:

.. code ::

        INC_DEFAULT += <name>.h
        INC_<osclass> += <name>.h

results in ﬁle <name>.h being installed or created and installed into
the appropriate $(INSTALL_LOCATION)/include/os/<osclass> directory.

Html and Doc ﬁles
^^^^^^^^^^^^^^^^^

A deﬁnition of the form:

.. code ::

        HTMLS_DIR = <dirname>
        HTMLS += <name>

results in ﬁle <name> being installed from the src directory to the
$(INSTALL_LOCATION)/html/<dirname> directory.

A deﬁnition of the form:

.. code ::

        DOCS += <name>

results in ﬁle <name> being installed from the src directory to the
$(INSTALL_LOCATION)/doc directory.

Templates
^^^^^^^^^

Adding deﬁnitions of the form

.. code ::

        TEMPLATES_DIR = <dirname>
        TEMPLATES += <name>

results in the ﬁle <name> being installed from the src directory to the
$(INSTALL_LOCATION)/templates/<dirname> directory. If a directory
structure of template ﬁles is to be installed, the template ﬁle names
may include a directory preﬁx.

Lex and yacc
^^^^^^^^^^^^

If a <name>.c source ﬁle speciﬁed in a Makeﬁle deﬁnition is not found in
the source directory, gnumake will try to build it from <name>.y and
<name>_lex.l ﬁles in the source directory. Lex converts a <name>.l Lex
code ﬁle to a lex.yy.c ﬁle which the build rules renames to <name>.c.
Yacc converts a <name>.y yacc code ﬁle to a y.tab.c ﬁle, which the build
rules renames to <name>.c. Optionally yacc can create a y.tab.h ﬁle
which the build rules renames to <name>.h.

Products
^^^^^^^^

A product executable is created for each <arch> and installed into
$(INSTALL_LOCATION)/bin/<arch> by specifying its name and the name of
either the object or source ﬁles containing code for the product. An
object or source ﬁle name can appear with or without a directory preﬁx.
Object ﬁles should contain a directory preﬁx. If the ﬁle has a directory
preﬁx e.g. $(EPICS_BASE_BIN), the ﬁle is taken from the speciﬁed
location. If a directory preﬁx is not present, make will look in the
source directories for a ﬁle with the speciﬁed name or try build it
using existing rules. An executable ﬁlename suﬃx appropriate for the
target arch (e.g. .exe) may be appended to the ﬁlename when the ﬁle is
created.

PROD speciﬁcations in the Makeﬁle for vxWorks target architectures
create a combined object ﬁle with library references resolved and a
corresponding .munch ﬁle.

.. code ::

        PROD_HOST += <name>
        <name>_SRC += <srcname>.c

results in the executable <name> being built for each HOST architecture,
<arch>, from a <srcname>.c ﬁle. Then <name> is installed into the
$(INSTALL_LOCATION)/bin/<arch> directory.

Specifying the product name.
''''''''''''''''''''''''''''

Any of the following can be speciﬁed:

   PROD += <name>

   Product <name> will be created for every target arch.

   PROD_<osclass> += <name>

   Product <name> will be created for all archs of the speciﬁed osclass.

   PROD_DEFAULT += <name>

   Product <name> will be created for any arch that does not have a
   PROD_<osclass> deﬁnition

   PROD_IOC += <name>

   Product <name> will be created for IOC type archs.

   PROD_IOC_<osclass> += <name>

   Product <name> will be created for all IOC type archs of the speciﬁed
   osclass.

   PROD_IOC_DEFAULT += <name>

   Product <name> will be created for any IOC type arch that does not
   have a PROD_IOC_<osclass> deﬁnition

   PROD_HOST += <name>

   Product <name> will be created for HOST type archs.

   PROD_HOST_<osclass> += <name>

   Product <name> will be created for all HOST type archs of the
   speciﬁed osclass.

   PROD_HOST_DEFAULT += <name>

   Product <name> will be created for any HOST type arch that does not
   have a PROD_HOST_<osclass> deﬁnition

Specifying product object ﬁle names
'''''''''''''''''''''''''''''''''''

Object ﬁles which have ﬁlenames with a “.o” or “.obj” suﬃx are deﬁned as
follows and can be speciﬁed without the suﬃx but should have the
directory preﬁx

   USR_OBJS += <name>

   Object ﬁles will be used in builds of all products and libraries

   USR_OBJS_<osclass> += <name>

   Object ﬁles will be used in builds of all products and libraries for
   archs with the speciﬁed osclass.

   USR_OBJS_DEFAULT += <name>

   Object ﬁles will be used in builds of all products and libraries for
   archs without a USR_OBJS_<osclass> deﬁnition speciﬁed.

   PROD_OBJS += <name>

   Object ﬁles will be used in builds of all products

   PROD_OBJS_<osclass> += <name>

   Object ﬁles will be used in builds of all products for archs with the
   speciﬁed osclass.

   PROD_OBJS_DEFAULT += <name>

   Object ﬁles will be used in builds of all products for archs without
   a PROD_OBJS_<osclass> deﬁnition speciﬁed.

   <prodname>_OBJS += <name>

   Object ﬁles will be used for all builds of the named product

   <prodname>_OBJS_<osclass> += <name>

   Object ﬁles will be used in builds of the named product for archs
   with the speciﬁed osclass.

   <prodname>_OBJS_DEFAULT += <name>

   Object ﬁles will be used in builds of the named product for archs
   without a <prodname>_OBJS_<osclass> deﬁnition speciﬁed.

   Combined object ﬁles, from R3.13 built modules and applications which
   have ﬁle names that do not include a “.o” or ”.obj” suﬃx (e.g.
   xyzLib) are deﬁned as follows:

   USR_OBJLIBS += <name>

   Combined object ﬁles will be used in builds of all libraries and
   products.

   USR_OBJLIBS_<osclass> += <name>

   Combined object ﬁles will be used in builds of all libraries and
   products for archs of the speciﬁed osclass.

   USR_OBJLIBS_DEFAULT += <name>

   Combined object ﬁles will be used in builds of all libraries and
   products for archs without a USR_OBJLIBS_<osclass> deﬁnition
   speciﬁed.

   PROD_OBJLIBS += <name>

   Combined object ﬁles will be used in builds of all products.

   PROD_OBJLIBS_<osclass> += <name>

   Combined object ﬁles will be used in builds of all products for archs
   of the speciﬁed osclass.

   PROD_OBJLIBS_DEFAULT += <name>

   Combined object ﬁles will be used in builds of all products for archs
   without a PROD_OBJLIBS_<osclass> deﬁnition speciﬁed.

   <prodname>_OBJLIBS += <name>

   Combined object ﬁles will be used for all builds of the named
   product.

   <prodname>_OBJLIBS_<osclass> += <name>

   Combined object ﬁles will be used in builds of the named product for
   archs with the speciﬁed osclass.

   <prodname>_OBJLIBS_DEFAULT += <name>

   Combined object ﬁles will be used in builds of the named product for
   archs without a <prodname>_OBJLIBS_<osclass> deﬁnition speciﬁed.

   <prodname>_LDOBJS += <name>

   Object ﬁles will be used for all builds of the named product.
   (deprecated)

   <prodname>_LDOBJS_<osclass> += <name>

   Object ﬁles will be used in builds of the name product for archs with
   the speciﬁed osclass. (deprecated)

   <prodname>_LDOBJS_DEFAULT += <name>

   Object ﬁles will be used in builds of the product for archs without a
   <prodname>_LDOBJS_<osclass> deﬁnition speciﬁed. (deprecated)

Specifying product source ﬁle names
'''''''''''''''''''''''''''''''''''

Source ﬁle names, which must have a suﬃx, are deﬁned as follows:

   SRCS += <name>

   Source ﬁles will be used for all deﬁned libraries and products.

   SRCS_<osclass> += <name>

   Source ﬁles will be used for all deﬁned libraries and products for
   all archs of the speciﬁed osclass.

   SRCS_DEFAULT += <name>

   Source ﬁles will be used for all deﬁned libraries and products for
   any arch that does not have a SRCS_<osclass> deﬁnition

   USR_SRCS += <name>

   Source ﬁles will be used for all products and libraries.

   USR_SRCS_<osclass> += <name>

   Source ﬁles will be used for all deﬁned products and libraries for
   all archs of the speciﬁed osclass.

   USR_SRCS_DEFAULT += <name>

   Source ﬁles will be used for all deﬁned products and libraries for
   any arch that does not have a USR_SRCS_<osclass> deﬁnition

   PROD_SRCS += <name>

   Source ﬁles will be used for all products.

   PROD_SRCS_<osclass> += <name>

   Source ﬁles will be used for all deﬁned products for all archs of the
   speciﬁed osclass.

   PROD_SRCS_DEFAULT += <name>

   Source ﬁles will be used for all deﬁned products for any arch that
   does not have a PROD_SRCS_<osclass> deﬁnition

   <prodname>_SRCS += <name>

   Source ﬁle will be used for the named product.

   <prodname>_SRCS_<osclass> += <name>

   Source ﬁles will be used for named product for all archs of the
   speciﬁed osclass.

   <prodname>_SRCS_DEFAULT += <name>

   Source ﬁles will be used for named product for any arch that does not
   have a <prodname>_SRCS_<osclass> deﬁnition

Specifying libraries to be linked when creating the product
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

For each library name speciﬁed which is not a system library nor a
library from EPICS_BASE, a <name>_DIR deﬁnition must be present in the
Makeﬁle to specify the location of the library.

Library names, which must not have a directory and “lib” preﬁx nor a
suﬃx, are deﬁned as follows:

   PROD_LIBS += <name>

   Libraries to be used when linking all deﬁned products.

   PROD_LIBS_<osclass> += <name>

   Libraries to be used or all archs of the speciﬁed osclass when
   linking all deﬁned products.

   PROD_LIBS_DEFAULT += <name>

   Libraries to be used for any arch that does not have a
   PROD_LIBS_<osclass> deﬁnition when linking all deﬁned products.

   USR_LIBS += <name>

   Libraries to be used when linking all deﬁned products.

   USR_LIBS_<osclass> += <name>

   Libraries to be used or all archs of the speciﬁed osclasswhen linking
   all deﬁned products.

   USR_LIBS_DEFAULT += <name>

   Libraries to be used for any arch that does not have a
   USR_LIBS_<osclass> deﬁnition when linking all deﬁned products.

   <prodname>_LIBS += <name>

   Libraries to be used for linking the named product.

   <prodname>_LIBS_<osclass> += <name>

   Libraries will be used for all archs of the speciﬁed osclass for
   linking named product.

   <prodname>_LIBS_DEFAULT += <name>

   Libraries to be used for any arch that does not have a
   <prodname>_LIBS_<osclass> deﬁnition when linking named product.

   SYS_PROD_LIBS += <name>

   System libraries to be used when linking all deﬁned products.

   SYS_PROD_LIBS_<osclass> += <name>

   System libraries to be used for all archs of the speciﬁed osclass
   when linking all deﬁned products.

   SYS_PROD_LIBS_DEFAULT += <name>

   System libraries to be used for any arch that does not have a
   PROD_LIBS_<osclass> deﬁnition when linking all deﬁned products.

   <prodname>_SYS_LIBS += <name>

   System libraries to be used for linking the named product.

   <prodname>_SYS_LIBS_<osclass> += <name>

   System libraries will be used for all archs of the speciﬁed osclass
   for linking named product.

   <prodname>_SYS_LIBS_DEFAULT += <name>

   System libraries to be used for any arch that does not have a
   <prodname>_LIBS_<osclass> deﬁnition when linking named product.

.. _the-order-of-dependant-libraries-1:

The order of dependant libraries
''''''''''''''''''''''''''''''''

Dependant library names appear in the following order on a product link
line:

#. <prodname>_LIBS
#. <prodname>_LIBS_<osclass> or <prodname>_LIBS_DEFAULT
#. PROD_LIBS
#. PROD_LIBS_<osclass> or PROD_LIBS_DEFAULT
#. USR_LIBS
#. USR_LIBS_<osclass> or USR_LIBS_DEFAULT
#. <prodname>_SYS_LIBS
#. <prodname>_SYS_LIBS_<osclass> or <prodname>_SYS_LIBS_DEFAULT
#. PROD_SYS_LIBS
#. PROD_SYS_LIBS_<osclass> or PROD_SYS_LIBS_DEFAULT
#. USR_SYS_LIBS
#. USR_SYS_LIBS_<osclass> or USR_SYS_LIBS_DEFAULT

Specifying product version number
'''''''''''''''''''''''''''''''''

On WIN32 only a product version number can be speciﬁed as follows:

   PROD_VERSION += <version>

This results in “/version:$(PROD_VERSION)” link option.

Generate version header
'''''''''''''''''''''''

A header can be generated which deﬁnes a single string macro with an
automatically generated identiﬁer. The default is the ISO 8601 formatted
time of the build. A revision id is used if a supported version control
system is present. This will typically be used to make an automatically
updated source version number visible at runtime (eg. with a stringin
record).

To enable this the variable GENVERSION must be set with the desired name
of the generated header. By default this variable is empty and no header
will be generated. If speciﬁed, this variable must be set before
configure/RULES is included.

It is also necessary to add an explicit dependency for each source ﬁle
which includes the generated header.

An Makeﬁle which generates a version header named “myversion.h” included
by “devVersionString.c” would have the following.

.. code ::

        TOP=../..
        include $(TOP)/configure/CONFIG
        # ... define PROD or LIBRARY names sometarget
        sometarget_SRCS = devVersionString.c
        GENVERSION = myversion.h
        include $(TOP)/configure/RULES
        # for each source file
        devVersionString$(DEP): $(GENVERSION)

The optional variables GENVERSIONMACRO and GENVERSIONDEFAULT give the
name of the C macro which will be deﬁned in the generated header, and
its default value if no version control system is being used. To avoid
conﬂicts, the macro name must be changed from its default MODULEVERSION
if the version header is to be installed.

Product static builds
'''''''''''''''''''''

Product executables can be linked with either archive versions or shared
versions of EPICS libraries. Shared versions of system libraries will
always be used in product linking. The deﬁnition of STATIC_BUILD
(YES/NO) in base/conﬁgure/ CONFIG_SITE determines which EPICS libraries
to use. When STATIC_BUILD is NO, shared libraries will be used.
(SHARED_LIBRARIES must be set to YES.) The default deﬁnition for
STATIC_BUILD in the EPICS base CONFIG_SITE distribution ﬁle is NO. A
STATIC_BUILD deﬁnition in a Makeﬁle will override the deﬁnition in
CONFIG_SITE.Static builds may not be possible on all systems. For static
builds, all nonsystem libraries must have an archive version, and this
may not be true form all libraries.

Test Products
^^^^^^^^^^^^^

Test products are product executables that are created but not installed
into $(INSTALL_LOCATION)/bin/<arch> directories. Test product libraries,
source, and object ﬁles are speciﬁed in exactly the same way as regular
products.

Any of the following can be speciﬁed:

   TESTPROD += <name>

   Test product <name> will be created for every target arch.

   TESTPROD_<osclass> += <name>

   Test product <name> will be created for all archs of the speciﬁed
   osclass.

   TESTPROD_DEFAULT += <name>

   | Test product <name> will be created for any arch that does not have
     a
   | TESTPROD_<osclass> deﬁnition

   TESTPROD_IOC += <name>

   Test product <name> will be created for IOC type archs.

   TESTPROD_IOC_<osclass> += <name>

   Test product <name> will be created for all IOC type archs of the
   speciﬁed osclass.

   TESTPROD_IOC_DEFAULT += <name>

   | Test product <name> will be created for any IOC type arch that does
     not have a
   | TESTPROD_IOC_<osclass> deﬁnition

   TESTPROD_HOST += <name>

   Test product <name> will be created for HOST type archs.

   TESTPROD_HOST_<osclass> += <name>

   Test product <name> will be created for all HOST type archs of the
   speciﬁed osclass.

   TESTPROD_HOST_DEFAULT += <name>

   | Test product <name> will be created for any HOST type arch that
     does not have a
   | TESTPROD_HOST_<osclass> deﬁnition

Test Scripts
^^^^^^^^^^^^

Test scripts are perl scripts whose names end in .t that get executed to
satisfy the runtests make target. They are run by the perl Test::Harness
library, and should send output to stdout following the Test Anything
Protocol. Any of the following can be speciﬁed, although only
TESTSCRIPTS_HOST is currently useful:

   TESTSCRIPTS += <name>

   Test script <name> will be created for every target arch.

   TESTSCRIPTS_<osclass> += <name>

   Test script <name> will be created for all archs of the speciﬁed
   osclass.

   TESTSCRIPTS_DEFAULT += <name>

   | Test script <name> will be created for any arch that does not have
     a
   | TESTSCRIPTS_<osclass> deﬁnition

   TESTSCRIPTS_IOC += <name>

   Test script <name> will be created for IOC type archs.

   TESTSCRIPTS_IOC_<osclass> += <name>

   Test script <name> will be created for all IOC type archs of the
   speciﬁed osclass.

   TESTSCRIPTS_IOC_DEFAULT += <name>

   | Test script <name> will be created for any IOC type arch that does
     not have a
   | TESTSCRIPTS_IOC_<osclass> deﬁnition

   TESTSCRIPTS_HOST += <name>

   Test script <name> will be created for HOST type archs.

   TESTSCRIPTS_HOST_<osclass> += <name>

   Test script <name> will be created for all HOST type archs of the
   speciﬁed osclass.

   TESTSCRIPTS_HOST_DEFAULT += <name>

   | Test script <name> will be created for any HOST type arch that does
     not have a
   | TESTSCRIPTS_HOST_<osclass> deﬁnition.

If a name in one of the above variables matches a regular executable
program name (normally generated as a test product) with “.t” appended,
a suitable perl script will be generated that will execute that program
directly; this makes it simple to run programs that use the
epicsUnitTest routines in libCom. A test script written in Perl with a
name ending .plt will be copied into the O.<arch> directory with the
ending changed to .t; such scripts will usually use the perl
Test::Simple or Test::More libraries.

 Miscellaneous Targets
^^^^^^^^^^^^^^^^^^^^^^

A deﬁnition of the form:

.. code ::

        TARGETS += <name>

results in the ﬁle <name> being built in the O.<arch> directory from
existing rules and ﬁles in the source directory. These target ﬁles are
not installed.

Installing Other Binaries
^^^^^^^^^^^^^^^^^^^^^^^^^

Deﬁnitions of the form:

.. code ::

        BIN_INSTALLS += <name>
        BIN_INSTALLS += <dir>/<name>
        BIN_INSTALLS_DEFAULT += <name>
        BIN_INSTALLS_<osclass> += <name>

will result in the named ﬁles being installed to the appropriate
$(INSTALL_LOCATION)/bin/<arch> directory. The ﬁle <name> can appear with
or without a directory preﬁx. If the ﬁle has a directory preﬁx e.g.
$(EPICS_BASE_BIN), it is copied from the speciﬁed location. If a
directory preﬁx is not present, make will look in the source directory
for the ﬁle.

Installing Other Libraries
^^^^^^^^^^^^^^^^^^^^^^^^^^

Deﬁnitions of the form:

.. code ::

        LIB_INSTALLS += <name>
        LIB_INSTALLS += <dir>/<name>
        LIB_INSTALLS_DEFAULT += <name>
        LIB_INSTALLS_<osclass> += <name>

result in ﬁles being installed to the appropriate
$(INSTALL_LOCATION)/lib/<arch> directory. The ﬁle <name> can appear with
or without a directory preﬁx. If the ﬁle has a directory preﬁx e.g.
$(EPICS_BASE_LIB), it is copied from the speciﬁed location. If a
directory preﬁx is not present, make will look in the source directory
for the ﬁle.

Win32 resource ﬁles
^^^^^^^^^^^^^^^^^^^

Deﬁnitions of the form:

| RCS += <name>   Resource deﬁnition script ﬁles for all products and
  libraries.
| RCS_<osclass> += <name>
|
| PROD_RCS += <name> Resource deﬁnition script ﬁles for all products.
| PROD_RCS_<osclass> += <name>
| PROD_RCS_DEFAULT += <name>
|
| LIB_RCS += <name> Resource deﬁnition script ﬁles for all libraries.
| LIB_RCS_<osclass> += <name>
| LIB_RCS_DEFAULT += <name>
|
| <name>_RCS += <name> Resource deﬁnition script ﬁles for speciﬁed
  product or library.
| <name>_RCS_<osclass> += <name>
| <name>_RCS_DEFAULT += <name>
|
| result in resource ﬁles (*.res ﬁles) being created from the speciﬁed
  \*.rc resource deﬁnition script ﬁles and linked into the prods and/or
  libraries.

TCL libraries
^^^^^^^^^^^^^

Deﬁnitions of the form:

.. code ::

        TCLLIBNAME += <name>
        TCLINDEX += <name>

result in the speciﬁed tcl ﬁles being installed to the
$(INSTALL_LOCATION)/lib/<arch> directory.

Java class ﬁles
^^^^^^^^^^^^^^^

Java class ﬁles can be created by the javac tool into $(INSTALL_JAVA) or
into the O.Common subdirectory, by specifying the name of the java class
ﬁle in the Makeﬁle. Command line options for the javac tool can be
speciﬁed. The conﬁguration ﬁles set the java c option
“-sourcepath .:..:../..”.

Any of the following can be speciﬁed:

   JAVA += <name>.java

   The <name>.java ﬁle will be used to create the <name>.class ﬁle in
   the $(INSTALL_JAVA) directory.

   TESTJAVA += <name>.java

   The <name>.java ﬁles will be used to create the <name>.class ﬁle in
   the O.Common subdirectory.

   USR_JAVACFLAGS += <name>

   The javac option <name> will be used on the javac command lines.

Example 1
'''''''''

In this example, three class ﬁles are created in
$(INSTALL_LOCATION)/javalib/mytest. The javac depreciation ﬂag is used
to list the description of each use or override of a deprecated member
or class.

   JAVA = mytest/one.java
   JAVA = mytest/two.java
   JAVA = mytest/three.java
   USR_JAVACFLAGS = -deprecation

Example 2
'''''''''

In this example, the test.class ﬁle is created in the O.Common
subdirectory.

   TESTJAVA = test.java

Java jar ﬁle
^^^^^^^^^^^^

| A single java jar ﬁle can be created using the java jar tool and
  installed into $(INSTALL_JAVA)
| (i.e. $(INSTALL_LOCATION)/javalib) by specifying its name, and the
  names of its input ﬁles to be included in the created jar ﬁle. The jar
  input ﬁle names must appear with a directory preﬁx.

Any of the following can be speciﬁed:

   JAR += <name>

   The <name> jar ﬁle will be created and installed into the
   $(INSTALL_JAVA) directory.

   JAR_INPUT += <name>

   Names of images, audio ﬁles and classes ﬁles to be included in the
   jar ﬁle.

   JAR_MANIFEST += <name>

   The preexisting manifest ﬁle will be used for the created jar ﬁle.

   JAR_PACKAGES += <name>

   Names of java packages to be installed and added to the created jar
   ﬁle.

.. _example-1-1:

Example 1
'''''''''

In this example, all the class ﬁles created by the current Makeﬁle’s
“JAVA+=” deﬁnitions, are placed into a ﬁle named mytest1.jar. A manifest
ﬁle will be automatically generated for the jar.

Note: $(INSTALL_CLASSES) is set to $(addpreﬁx
$(INSTALL_JAVA)/,$(CLASSES)) in the EPICS base conﬁgure ﬁles.

   JAR = mytest1.jar
   JAR_INPUT = $(INSTALL_CLASSES)

.. _example-2-1:

Example 2
''''''''''

In this example, three class ﬁles are created and placed into a new jar
archive ﬁle named mytest2.jar. An existing manifest ﬁle, mytest2.mf is
put into the new jar ﬁle.

   JAR = mytest2.jar
   JAR_INPUT = $(INSTALL_JAVA)/mytest/one.class
   JAR_INPUT = $(INSTALL_JAVA)/mytest/two.class
   JAR_INPUT = $(INSTALL_JAVA)/mytest/three.class
   JAR_MANIFEST = mytest2.mf

Java native method C header ﬁles
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A C header ﬁles for use with java native methods will be created by the
javah tool in the O.Common subdirectory by specifying the name of the
header ﬁle to be created. The name of the java class ﬁle used to
generate the header is derived from the name of the header ﬁle.
Underscores (_) are used as a header ﬁle name delimiter. Command line
options for the javah tool can be speciﬁed.

Any of the following can be speciﬁed:

   JAVAINC += <name>.h

   The <name>.h header ﬁle will be created in the O.Common subdirectory.

   USR_JAVAHFLAGS += <name>

   The javah option <name> will be used on the javah tool command line.

Example
'''''''

In this example, the C header xx_yy_zz.h will be created in the
$(COMMON_DIR) subdirectory from the class xx.yy.zz (i.e. the java class
ﬁle $(INSTALL_JAVA)/xx/yy/zz.class)). The option “-old” will tell javah
to create old JDK1.0 style header ﬁles.

   JAVAINC = xx_yy_zz.h
   USR_JAVAHFLAGS = -old

User Created CONFIG\* and RULES\* ﬁles
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Module developers can now create new CONFIG and RULES\* ﬁles ia a <top>
application source directory. These new CONFIG\* or RULES\* ﬁles will be
installed into the directory $(INSTALL_LOCATION)/cfg by including lines
like the following Makeﬁle line:

   CFG += CONFIG_MY1 RULES_MY1

The build will install the new ﬁles CONFIG_MY1 and RULES_MY1 into the
$(INSTALL_LOCATION)/cfg directory.

Files in a $(INSTALL_LOCATION)/cfg directory are now included during a
build by so that the deﬁnitions and rules in them are available for use
by later src directory Makeﬁles in the same module or by other modules
with a RELEASE line pointing to the TOP of this module.

User Created File Types
^^^^^^^^^^^^^^^^^^^^^^^

Module developers can now deﬁne a new type of ﬁle, e.g. ABC, so that
ﬁles of type ABC will be installed into a directory deﬁned by
INSTALL_ABC. This is done by creating a new CONFIG_<name> ﬁle, e.g.
CONFIG_ABC, with the following lines:

   FILE_TYPE += ABC
   INSTALL_ABC = $(INSTALL_LOCATION)/abc

The INSTALL_ABC directory should be a subdirectory of
$(INSTALL_LOCATION). The ﬁle type ABC should be target architecture
independent (alh ﬁles, medm ﬁles, edm ﬁles.

Optional rules necessary for ﬁles of type ABC should be put in a
RULES_ABC ﬁle.

The module developer installs new CONFIG_ABC and RULES_ABC ﬁles for the
new ﬁle type into the directory $(INSTALL_LOCATION)/cfg by including the
following Makeﬁle line:

   CFG += CONFIG_ABC RULES_ABC

Files of type ABC are installed into INSTALL_ABC directory by adding a
line like the following to a Makeﬁle.

   ABC += <filename1> <filename2> <filename3>

Since the ﬁles in $(INSTALL_LOCATION)/cfg directory are now included by
the base conﬁg ﬁles, the ABC += deﬁnition lines are available for use by
later src directory Makeﬁles in the same module or by other modules with
a RELEASE line pointing to the TOP of this module.

Assemblies
^^^^^^^^^^

A single output ﬁle is generated from assembling speciﬁed snippet ﬁles.
Snippet ﬁle names start with numbers and are sorted when the snippets
are concatenated: ﬁrst by the number, then alphabetical by the remaining
part of the name. (This mechanism is conceptually similar to the Linux
convention of collecting conﬁguration ﬁle snippets in \*.d directories.)

Snippets with ﬁle names not starting with a number or ending in ’~’ are
ignored. The speciﬁed snippets are processed in the order they appear on
the command line. Multiple snippets with the same number are
concatenated. ”Commands” (tags in the snippet name) can be used to
control the treatment of snippets with the same number:

   D - Default
   Snippet is treated as a default, which is replaced (overwritten) by
   any other snippet with the same number.
   R - Replace
   Snippet is replacing (overwriting) already processed snippets with
   the same number.

Speciﬁcation of the target ﬁle is diﬀerent for architecture dependent or
independent ﬁles.

   COMMON_ASSEMBLIES += st.cmd
   ASSEMBLIES += mytool.rc

Snippet ﬁles are conﬁgured speciﬁcally (relative or absolute path) or as
patterns (searched relative to all source directories).

   mytool.rc_SNIPPETS += ../rc.d/10_head ../rc.d/20_init
   st.cmd_PATTERN += st.cmd.d/⋆

Macros
''''''

The following macros can be used in snippets, and will be replaced by
the current value when assembling is done.

   \_DATETIME\_ Date and time of the build
   \_USERNAME\_ Name of the user running the build
   \_HOST\_ Name of the host on which the build is run
   \_OUTPUTFILE\_ Name of the generated ﬁle
   \_SNIPPETFILE\_ Name of the current snippet

.. _example-3:

Example
'''''''

This mechanism can be used to create an IOC startup ﬁle from snippets in
a global and an application speciﬁc directory, allowing applications to
add commands to diﬀerent phases of the IOC startup by dropping
appropriately numbered snippets into the directory.

Given the following directories and snippets:

.. code ::

        /global/st.cmd.d:   (G=GLOBAL)
            D10_init
            20_environment
            30_drivers
            D40_settings
            70_start-ioc

.. code ::

        ../st.cmd.d:        (L=LOCAL)
            D10_init
            40_settings
            40_settings~
            30_another-driver
            R70_start-my-ioc

And the following Makeﬁle declaration:

.. code ::

        SCRIPTS += $(COMMON_DIR)/st.cmd
        COMMON_ASSEMBLIES += st.cmd
        st.cmd_SNIPPETS += $(wildcard /global/st.cmd.d/⋆)
        st.cmd_PATTERN += st.cmd.d/⋆

The build will create and install a st.cmd script using the following
snippets:

.. container:: tabular

   ============== ================= ========================================
   Source         Snippet           Comment
   -------------- --------------    --------------
   L              10_init           L default resets the G default
   G              20_environment
   L              30_another-driver implicit addition, alphabetical sorting
   G              30_drivers
   L              40_settings       replacing a default, ignoring backup ﬁle
   L              70_start-my-ioc   explicit replace
   \
   ============== ================= ========================================

Table of Makeﬁle deﬁnitions
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Deﬁnitions given below containing <osclass> are used when building for
target archs of a speciﬁc osclass, and the <osclass> part of the name
should be replaced by the desired osclass, e.g. solaris, vxWorks, etc.
If a \_DEFAULT setting is given but a particular <osclass> requires that
the default not apply and there are no items in the deﬁnition that apply
for that <osclass>, the value “-nil-” should be speciﬁed in the relevant
Makeﬁle deﬁnition.

.. container:: center

   .. container:: longtable

      ================================================= ========================================================================================================================================================================================
      Build Option                                      Description
      --------------                                    --------------
      Products to be built (host type archs only)
      --------------                                    --------------
      PROD                                              products (names without execution suﬃx) to build and install. Specify xyz to build executable xyz on Unix and xyz.exe on WIN32
      PROD_<osclass>                                    os class speciﬁc products to build and install for <osclass> archs only
      PROD_DEFAULT                                      products to build and install for archs with no PROD_<osclass> speciﬁed
      PROD_IOC                                          products to build and install for ioc type archs
      PROD_IOC_<osclass>                                os speciﬁc products to build and install for ioc type archs
      PROD_IOC_DEFAULT                                  products to build and install for ioc type arch systems with no PROD_IOC_<osclass> speciﬁed
      PROD_HOST                                         products to build and install for host type archs.
      PROD_HOST_<osclass>                               os class speciﬁc products to build and install for <osclass> type archs
      PROD_HOST_DEFAULT                                 products to build and install for arch with no PROD_HOST_<osclass> speciﬁed
      Test products to be built
      --------------                                    --------------
      TESTPROD                                          test products (names without execution suﬃx) to build but not install
      TESTPROD_<osclass>                                os class speciﬁc test products to build but not install
      TESTPROD_DEFAULT                                  test products to build but not install for archs with no TESTPROD_<osclass> speciﬁed
      TESTPROD_IOC                                      test products to build and install for ioc type archs
      TESTPROD_IOC_<osclass>                            os speciﬁc test products to build and install for ioc type archs
      TESTPROD_IOC_DEFAULT                              test products to build and install for ioc type arch systems with no TESTPROD_IOC_<osclass> speciﬁed
      TESTPROD_HOST                                     testproducts to build and install for host type archs.
      TESTPROD_HOST_<osclass>                           os class speciﬁc testproducts to build and install for <osclass> type archs
      \
      TESTPROD_HOST_DEFAULT                             test products to build and install for arch with no TESTPROD_HOST_<osclass> speciﬁed
      Test scripts to be built
      --------------                                    --------------
      TESTSCRIPTS                                       test scripts (names with .t suﬃx) to build but not install
      TESTSCRIPTS_<osclass>                             os class speciﬁc test scripts to build but not install
      TESTSCRIPTS_DEFAULT                               test scripts to build but not install for archs with no TESTSCRIPTS_<osclass> speciﬁed
      TESTSCRIPTS_IOC                                   test scripts to build and install for ioc type archs
      TESTSCRIPTS_IOC_<osclass>                         os speciﬁc test scripts to build and install for ioc type archs
      TESTSCRIPTS_IOC_DEFAULT                           test scripts to build and install for ioc type arch systems with no TESTSCRIPTS_IOC_<osclass> speciﬁed
      TESTSCRIPTS_HOST                                  test scripts to build and install for host type archs.
      TESTSCRIPTS_HOST_<osclass>                        os class speciﬁc testscripts to build and install for <osclass> type archs
      TESTSCRIPTS_HOST_DEFAULT                          test scripts to build and install for arch with no TESTSCRIPTS_HOST_<osclass> speciﬁed
      Libraries to be built
      --------------                                    --------------
      LIBRARY                                           name of library to build and install. The name should NOT include a preﬁx or extension e.g. specify Ca to build libCa.a on Unix, Ca.lib or Ca.dll on WIN32
      LIBRARY_<osclass>                                 os speciﬁc libraries to build and install
      LIBRARY_DEFAULT                                   libraries to build and install for archs with no LIBRARY_<osclass> speciﬁed
      LIBRARY_IOC                                       name of library to build and install for ioc type archs. The name should NOT include a preﬁx or extension e.g. specify Ca to build libCa.a on Unix, Ca.lib or Ca.dll on WIN32
      LIBRARY_IOC_<osclass>                             os speciﬁc libraries to build and install for ioc type archs
      LIBRARY_IOC_DEFAULT                               libraries to build and install for ioc type arch systems with no LIBRARY_IOC_<osclass> speciﬁed
      LIBRARY_HOST                                      name of library to build and install for host type archs. The name should NOT include a preﬁx or extension, e.g. specify Ca to build libCa.a on Unix, Ca.lib or Ca.dll on WIN32
      LIBRARY_HOST_<osclass>                            os class speciﬁc libraries to build and install for host type archs
      \
      LIBRARY_HOST_DEFAULT                              libraries to build and install for host type arch systems with no LIBRARY_HOST_<osclass> speciﬁed
      SHARED_LIBRARIES                                  build shared libraries? Must be YES or NO
      SHRLIB_VERSION                                    shared library version number
      Loadable libraries to be built
      --------------                                    --------------
      LOADABLE_LIBRARY                                  name of loadable library to build and install. The name should NOT include a preﬁx or extension e.g. specify Ca to build libCa.so on Unix and Ca.dll on WIN32
      LOADABLE_LIBRARY_<osclass>                        os speciﬁc loadable libraries to build and install
      LOADABLE_LIBRARY_DEFAULT                          loadable libraries to build and install for archs with no LOADABLE_LIBRARY_<osclass> speciﬁed
      LOADABLE_LIBRARY_HOST                             name of loadable library to build and install for host type archs. The name should NOT include a preﬁx or extension, e.g. specify test to build libtest.so on Unix and test.dll on WIN32
      LOADABLE_LIBRARY_HOST_<osclass>                   os class speciﬁc loadable libraries to build and install for host type archs
      LOADABLE_LIBRARY_HOST_DEFAULT                     loadable libraries to build and install for host type arch systems with no LOADABLE_LIBRARY_HOST_<osclass> speciﬁed
      Combined object ﬁles (vxWorks only)
      --------------                                    --------------
      OBJLIB                                            name of a combined object ﬁle library and corresponding munch ﬁle to build and install. The name will have a Library suﬃx appended
      OBJLIB_vxWorks                                    same as OBJLIB
      OBJLIB_SRCS                                       source ﬁles to build the OBJLIB
      OBJLIB_OBJS                                       object ﬁles to include in OBJLIB
      Product and library source ﬁles
      --------------                                    --------------
      SRCS                                              source ﬁles to build all PRODs and LIBRARYs
      SRCS_<osclass>                                    osclass speciﬁc source ﬁles to build all PRODs and LIBRARYs
      SRCS_DEFAULT                                      source ﬁle to build all PRODs and LIBRARYs for archs with no SRCS_<osclass> speciﬁed
      USR_SRCS                                          source ﬁles to build all PRODs and LIBRARYs
      \
      USR_SRCS_<osclass>                                osclass speciﬁc source ﬁles to build all PRODs and LIBRARYs
      USR_SRCS_DEFAULT                                  source ﬁle to build all PRODs and LIBRARYs for archs with no SRCS_<osclass> speciﬁed
      PROD_SRCS                                         source ﬁles to build all PRODs
      PROD_SRCS_<osclass>                               osclass speciﬁc source ﬁles to build all PRODs
      PROD_SRCS_DEFAULT                                 source ﬁles needed to build PRODs for archs with no SRCS_<osclass> speciﬁed
      LIB_SRCS                                          source ﬁles for building LIBRARY (e.g. LIB_SRCS=la.c lb.c lc.c)
      LIB_SRCS_<osclass>                                os-speciﬁc library source ﬁles
      LIB_SRCS_DEFAULT                                  library source ﬁles for archs with no LIB_SRCS_<osclass> speciﬁed
      LIBSRCS                                           source ﬁles for building LIBRARY (deprecated)
      LIBSRCS_<osclass>                                 os-speciﬁc library source ﬁles (deprecated)
      LIBSRCS_DEFAULT                                   library source ﬁles for archs with no LIBSRCS_<osclass> speciﬁed (deprecated)
      <name>_SRCS                                       source ﬁles to build a speciﬁc PROD or LIBRARY
      <name>_SRCS_<osclass>                             os speciﬁc source ﬁles to build a speciﬁc PROD or LIBRARY
      <name>_SRCS_DEFAULT                               source ﬁles needed to build a speciﬁc PROD or LIBRARY for archs with no <prod>_SRCS_<osclass> speciﬁed
      Product and library object ﬁles
      --------------                                    --------------
      USR_OBJS                                          object ﬁles, speciﬁed without suﬃx, to build all PRODs and LIBRARYs
      USR_OBJS_<osclass>                                osclass speciﬁc object ﬁles, speciﬁed without suﬃx, to build all PRODs and LIBRARYs
      USR_OBJS_DEFAULT                                  object ﬁles, speciﬁed without suﬃx, needed to build PRODs and LIBRARYs for archs with no OBJS_<osclass> speciﬁed
      PROD_OBJS                                         object ﬁles, speciﬁed without suﬃx, to build all PRODs
      PROD_OBJS_<osclass>                               osclass speciﬁc object ﬁles, speciﬁed without suﬃx, to build all PRODs
      \
      PROD_OBJS_DEFAULT                                 object ﬁles, speciﬁed without suﬃx, needed to build PRODs for archs with no OBJS_<osclass> speciﬁed
      LIB_OBJS                                          object ﬁles, speciﬁed without suﬃx, for building all LIBRARYs (e.g. LIB_OBJS+=$(AB_BIN)/la $(AB_BIN)/lb)
      LIB_OBJS_<osclass>                                os-speciﬁc library object ﬁles, specify without suﬃx,
      LIB_OBJS_DEFAULT                                  library object ﬁles, speciﬁed without suﬃx, for archs with no LIB_OBJS_<osclass> speciﬁed
      <name>_OBJS                                       object ﬁles, speciﬁed without suﬃx, to build a speciﬁc PROD or LIBRARY
      <name>_OBJS_<osclass>                             os speciﬁc object ﬁles, speciﬁed without suﬃx, to build a speciﬁc PROD or LI\|BRARY
      <name>_OBJS_DEFAULT                               object ﬁles, without suﬃx, needed to build a speciﬁc PROD or LIBRARY for archs with no <prod>_OBJS_<osclass> speciﬁed
      Product and library R3.13 combined object ﬁles
      --------------                                    --------------
      USR_OBJLIBS                                       combined object ﬁles with ﬁlenames that do not have a suﬃx, needed for building all PRODs and LIBRARYs (e.g. USR_OBJLIBS+=$(XYZ_BIN)/xyzLib)
      USR_OBJLIBS_<osclass>                             os-speciﬁc combined object ﬁles with ﬁlenames that do not have a suﬃx for building all PRODs and LIBRARYs
      USR_OBJLIBS_DEFAULT                               combined object ﬁles with ﬁlenames that do not have a suﬃx, for archs with no USR_OBJLIBS_<osclass> speciﬁed for building all PRODs and LIBRARYs
      PROD_OBJLIBS                                      combined object ﬁles with ﬁlenames that do not have a suﬃx, needed for building all PRODs (e.g. PROD_OBJLIBS+=$(XYZ_BIN)/xyzLib)
      PROD_OBJLIBS_<osclass>                            os-speciﬁc combined object ﬁles with ﬁlenames that do not have a suﬃx for building all PRODs
      PROD_OBJLIBS_DEFAULT                              combined object ﬁles with ﬁlenames that do not have a suﬃx, for archs with no PROD_OBJLIBS_<osclass> speciﬁed for building all PRODs
      LIB_OBJLIBS                                       combined object ﬁles with ﬁlenames that do not have a suﬃx, needed for building all LIBRARYs (e.g. LIB_OBJLIBS+=$(XYZ_BIN)/xyzLib)
      LIB_OBJLIBS_<osclass>                             os-speciﬁc combined object ﬁles with ﬁlenames that do not have a suﬃx for building all LIBRARYs
      LIB_OBJLIBS_DEFAULT                               combined object ﬁles with ﬁlenames that do not have a suﬃx, for archs with no LIB_OBJLIBS_<osclass> speciﬁed for building all LIBRARYs
      <name>_OBJLIBS                                    combined object ﬁles with ﬁlenames that do not have a suﬃx, needed to build a speciﬁc PROD or LIBRARY
      <name>_OBJLIBS_<osclass>                          os speciﬁc combined object ﬁles with ﬁlenames that do not have a suﬃx, to build a speciﬁc PROD or LI\|BRARY
      <name>_OBJLIBS_DEFAULT                            combined object ﬁles with ﬁlenames that do not have a suﬃx, needed to build a speciﬁc PROD or LIBRARY for archs with no <name>_OBJLIBS_<osclass> speciﬁed
      \
      <name>_LDOBJS                                     combined object ﬁles with ﬁlenames that do not have a suﬃx, needed to build a speciﬁc PROD or LIBRARY (deprecated)
      <name>_LDOBJS_<osclass>                           os speciﬁc combined object ﬁles with ﬁlenames that do not have a suﬃx, to build a speciﬁc PROD or LI\|BRARY (deprecated)
      <name>_LDOBJS_DEFAULT                             combined object ﬁles with ﬁlenames that do not have a suﬃx, needed to build a speciﬁc PROD or LIBRARY for archs with no <name>_LDOBJS_<osclass> speciﬁed (deprecated)
      Product and library dependant libraries
      --------------                                    --------------
      <name>_DIR                                        directory to search for the speciﬁed lib. (For libs listed in all PROD_LIBS, LIB_LIBS, <name>_LIBS and USR_LIBS listed below)System libraries do not need a <name>_dir deﬁnition.
      USR_LIBS                                          load libraries (e.g. Xt X11) for all products and libraries
      USR_LIBS_<osclass>                                os speciﬁc load libraries for all makeﬁle links
      USR_LIBS_DEFAULT                                  load libraries for systems with no USR_LIBS_<osclass> speciﬁed libs
      <name>_LIBS                                       named prod or library speciﬁc ld libraries (e.g. probe_LIBS=X11 Xt)
      <name>_LIBS_<osclass>                             os-speciﬁc libs needed to link named prod or library
      <name>_LIBS_DEFAULT                               libs needed to link named prod or library for systems with no <name>_LIBS_<osclass> speciﬁed
      PROD_LIBS                                         libs needed to link every PROD
      PROD_LIBS_<osclass>                               os-speciﬁc libs needed to link every PROD
      PROD_LIBS_DEFAULT                                 libs needed to link every PROD for archs with no PROD_LIBS_<osclass> speciﬁed
      LIB_LIBS                                          libraries to be linked with every library being created
      LIB_LIBS_<osclass>                                os class speciﬁc libraries to be linked with every library being created
      LIB_LIBS_DEFAULT                                  libraries to be linked with every library being created for archs with no LIB_LIBS_<osclass> speciﬁed
      USR_SYS_LIBS                                      system libraries (e.g. Xt X11) for all products and libraries
      USR_SYS_LIBS_<osclass>                            os class speciﬁc system libraries for all makeﬁle links
      USR_SYS_LIBS_DEFAULT                              system libraries for archs with no USR_SYS_LIBS_<osclass> speciﬁed
      \
      <name>_SYS_LIBS                                   named prod or library speciﬁc system ld libraries
      <name>_SYS_LIBS_<osclass>                         os class speciﬁc system libs needed to link named prod or library
      <name>_SYS_LIBS_DEFAULT                           system libs needed to link named prod or library for systems with no <name>_SYS_LIBS_<osclass> speciﬁed
      PROD_SYS_LIBS                                     system libs needed to link every PROD
      PROD_SYS_LIBS_<osclass>                           os class speciﬁc system libs needed to link every PROD
      PROD_SYS_LIBS_DEFAULT                             system libs needed to link every PROD for archs with no PROD_SYS_LIBS_<osclass> speciﬁed
      LIB_SYS_LIBS                                      system libraries to be linked with every library being created
      LIB_SYS_LIBS_<osclass>                            os class speciﬁc system libraries to be linked with every library being created
      LIB_SYS_LIBS_DEFAULT                              system libraries to be linked with every library being created for archs with no LIB_SYS_LIBS_<osclass> speciﬁed
      SYS_PROD_LIBS                                     system libs needed to link every PROD for all systems (deprecated)
      SYS_PROD_LIBS_<osclass>                           os class speciﬁc system libs needed to link every PROD (deprecated)
      SYS_PROD_LIBS_DEFAULT                             system libs needed to link every PROD for systems with no SYS_PROD_LIBS_<osclass> speciﬁed (deprecated)
      Compiler ﬂags
      --------------                                    --------------
      USR_CFLAGS                                        C compiler ﬂags for all systems
      USR_CFLAGS_<T_A>                                  target architecture speciﬁc C compiler ﬂags
      USR_CFLAGS_<osclass>                              os class speciﬁc C compiler ﬂags
      USR_CFLAGS_DEFAULT                                C compiler ﬂags for archs with no USR_CFLAGS_<osclass> speciﬁed
      <name>_CFLAGS                                     ﬁle speciﬁc C compiler ﬂags (e.g. xxxRecord_CFLAGS=-g)
      <name>_CFLAGS_<T_A>                               ﬁle speciﬁc C compiler ﬂags for a speciﬁc target architecture
      <name>_CFLAGS_<osclass>                           ﬁle speciﬁc C compiler ﬂags for a speciﬁc os class
      \
      USR_CXXFLAGS                                      C++ compiler ﬂags for all systems (e.g. xyxMain_CFLAGS=-DSDDS)
      USR_CXXFLAGS_<T_A>                                target architecture speciﬁc C++ compiler ﬂags
      USR_CXXFLAGS_<osclass>                            os-speciﬁc C++ compiler ﬂags
      USR_CXXFLAGS_DEFAULT                              C++ compiler ﬂags for systems with no USR_CXXFLAGS_<osclass> speciﬁed
      <name>_CXXFLAGS                                   ﬁle speciﬁc C++ compiler ﬂags
      <name>_CXXFLAGS_<T_A>                             ﬁle speciﬁc C++ compiler ﬂags for a speciﬁc target architecture
      <name>_CXXFLAGS_<osclass>                         ﬁle speciﬁc C++ compiler ﬂags for a speciﬁc osclass
      USR_CPPFLAGS                                      C pre-processor ﬂags (for all makeﬁle compiles)
      USR_CPPFLAGS_<T_A>                                target architecture speciﬁc cpp ﬂags
      USR_CPPFLAGS_<osclass>                            os speciﬁc cpp ﬂags
      USR_CPPFLAGS_DEFAULT                              cpp ﬂags for systems with no USR_CPPFLAGS_<osclass> speciﬁed
      <name>_CPPFLAGS                                   ﬁle speciﬁc C pre-processor ﬂags(e.g. xxxRecord_CPPFLAGS=-DDEBUG)
      <name>_CPPFLAGS_<T_A>                             ﬁle speciﬁc cpp ﬂags for a speciﬁc target architecture
      <name>_CPPFLAGS_<osclass>                         ﬁle speciﬁc cpp ﬂags for a speciﬁc os class
      USR_INCLUDES                                      directories, with -I preﬁx, to search for include ﬁles(e.g. -I$(EPICS_EXTENSIONS_INCLUDE))
      USR_INCLUDES_<osclass>                            directories, with -I preﬁx, to search for include ﬁles for a speciﬁc os class
      USR_INCLUDES_DEFAULT                              directories, with -I preﬁx, to search for include ﬁles for systems with no <name>_INCLUDES_<osclass> speciﬁed
      <name>_INCLUDES                                   directories, with -I preﬁx, to search for include ﬁles when building a speciﬁc object ﬁle (e.g. -I$(MOTIF_INC))
      <name>_INCLUDES_<T_A>                             ﬁle speciﬁc directories, with -I preﬁx, to search for include ﬁles for a speciﬁc target architecture
      <name>_INCLUDES_<osclass>                         ﬁle speciﬁc directories, with -I preﬁx, to search for include ﬁles for a speciﬁc os class
      \
      HOST_WARN                                         Are compiler warning messages desired for host type builds? (YES or NO) (default is YES)
      CROSS_WARN                                        C cross-compiler warning messages desired (YES or NO) (default YES)
      HOST_OPT                                          Is host build compiler optimization desired (default is NO optimization)
      CROSS_OPT                                         Is cross-compiler optimization desired (YES or NO) (default is NO optimization)
      CMPLR                                             C compiler selection, TRAD, ANSI or STRICT (default is STRICT)
      CXXCMPLR                                          C++ compiler selection, NORMAL or STRICT (default is STRICT)
      Linker options
      --------------                                    --------------
      USR_LDFLAGS                                       linker options (for all makeﬁle links)
      USR_LDFLAGS_<osclass>                             os speciﬁc linker options (for all makeﬁle links)
      USR_LDFLAGS_DEFAULT                               linker options for systems with no USR_LDFLAGS_<osclass> speciﬁed
      PROD_LDFLAGS                                      prod linker options
      PROD_LDFLAGS_<osclass>                            os speciﬁc prod linker options
      PROD_LDFLAGS_DEFAULT                              prod linker options for systems with no PROD_LDFLAGS_<osclass> speciﬁed
      LIB_LDFLAGS                                       library linker options
      LIB_LDFLAGS_<osclass>                             os speciﬁc library linker options
      LIB_LDFLAGS_DEFAULT                               library linker options for systems with no LIB_LDFLAGS_<osclass> speciﬁed
      <name>_LDFLAGS                                    prod or library speciﬁc linker options
      <name>_LDFLAGS_<osclass>                          prod or library speciﬁc linker ﬂags for a speciﬁc os class
      <name>_LDFLAGS_DEFAULT                            linker options for systems with no <name>_LDFLAGS_<osclass> speciﬁed
      STATIC_BUILD                                      Is static build desired (YES or NO) (default is NO). On win32 if STATIC_BUILD=YES then set SHARED_LIBRARIES=NO)
      \
      Header ﬁles to be installed
      --------------                                    --------------
      INC                                               list of include ﬁles to install into $(INSTALL_DIR)/include
      INC_<osclass>                                     os speciﬁc includes to installed under $(INSTALL_DIR)/include/os/<osclass>
      INC_DEFAULT                                       include ﬁles to install where no INC_<osclass> is speciﬁed
      Perl, csh, tcl etc. script installation
      --------------                                    --------------
      SCRIPTS                                           scripts to install for all systems
      SCRIPTS_<osclass>                                 os-speciﬁc scripts to install
      SCRIPTS_DEFAULT                                   scripts to install for systems with no SCRIPTS_<osclass> speciﬁed
      SCRIPTS_IOC                                       scripts to install for ioc type archs.
      SCRIPTS_IOC_<osclass>                             os speciﬁc scripts to install for ioc type archs
      SCRIPTS_IOC_DEFAULT                               scripts to install for ioc type arch systems with no SCRIPTS_IOC_<osclass> speciﬁed
      SCRIPTS_HOST                                      scripts to install for host type archs. T
      SCRIPTS_HOST_<osclass>                            os class speciﬁc scripts to install for host type archs
      SCRIPTS_HOST_DEFAULT                              scripts to install for host type arch systems with no OBJS_HOST_<osclass> speciﬁed
      TCLLIBNAME                                        list of tcl scripts to install into $(INSTALL_DIR)/lib/<osclass> (Unix hosts only)
      TCLINDEX                                          name of tcl index ﬁle to create from TCLLIBNAME scripts
      Object ﬁles                                       The names in the following OBJS deﬁnitions should NOT include a suﬃx (.o or.obj).
      --------------                                    --------------
      OBJS                                              object ﬁles to build and install for all system.
      OBJS_<osclass>                                    os-speciﬁc object ﬁles to build and install.
      OBJS_DEFAULT                                      object ﬁles to build and install for systems with no OBJS_<osclass> speciﬁed.
      \
      OBJS_IOC                                          object ﬁles to build and install for ioc type archs.
      OBJS_IOC_<osclass>                                os speciﬁc object ﬁles to build and install for ioc type archs
      OBJS_IOC_DEFAULT                                  object ﬁles to build and install for ioc type arch systems with no OBJS_IOC_<osclass> speciﬁed
      OBJS_HOST                                         object ﬁles to build and install for host type archs. T
      OBJS_HOST_<osclass>                               os class speciﬁc object ﬁles to build and install for host type archs
      OBJS_HOST_DEFAULT                                 object ﬁles to build and install for host type arch systems with no OBJS_HOST_<osclass> speciﬁed
      Documentation
      --------------                                    --------------
      DOCS                                              text ﬁles to be installed into the $(INSTALL_DIR)/doc directory
      HTMLS_DIR                                         name install Hypertext directory name i.e. $(INSTALL_DIR)/html/$(HTMLS_DIR)
      HTMLS                                             hypertext ﬁles to be installed into the $(INSTALL_DIR)/html/$(HTMLS_DIR) directory
      TEMPLATES_DIR                                     template directory to be created as $(INSTALL_DIR)/templates/$(TEMPLATE_DIR)
      TEMPLATES                                         template ﬁles to be installed into $(TEMPLATE_DIR)
      Database Deﬁnition ﬁles
      --------------                                    --------------
      DBD                                               database deﬁnition ﬁles to be installed or created and installed into $(INSTALL_DBD).
      DBDINC                                            names, without suﬃx, of menus or record database deﬁnitions and headers to be installed or created and installed.
      USR_DBDFLAGS                                      optional ﬂags for dbExpand. Currently only include path (-I <path>) and macro substitution (-S <substitution>) are supported.
      DBD_INSTALLS                                      ﬁles from speciﬁed directory to install into $(INSTALL_DBD) (e.g. DBD_INSTALLS = $(APPNAME)/dbd/test.dbd
      Database Files
      --------------                                    --------------
      DB                                                database ﬁles to be installed or created and installed into $(INSTALL_DB).
      DB_INSTALLS                                       ﬁles from speciﬁed directory to install into $(INSTALL_DB) (e.g. DB_INSTALLS = $(APPNAME)/db/test.db
      \
      USR_DBFLAGS                                       optional ﬂags for msi (EPICS Macro Substitution Tool)
      Options for other programs
      --------------                                    --------------
      YACCOPT                                           yacc options
      LEXOPT                                            lex options
      SNCFLAGS                                          state notation language, snc, options
      <name>_SNCFLAGS                                   product speciﬁc state notation language options
      E2DB_FLAGS                                        e2db options
      SCH2EDIF_FLAGS                                    sch2edif options
      RANLIBFLAGS                                       ranlib options
      USR_ARFLAGS                                       ar options
      Facilities for building Java programs
      --------------                                    --------------
      JAVA                                              names of Java source ﬁles to be built and installed
      TESTJAVA                                          names of Java source ﬁles to be built
      JAVAINC                                           names of C header ﬁle to be created in O.Common subdirectory
      JAR                                               name of Jar ﬁle to be built
      JAR_INPUT                                         names of ﬁles to be included in JAR
      JAR_MANIFEST                                      name of manifest ﬁle for JAR
      USR_JAVACFLAGS                                    javac tool options
      USR_JAVAHFLAGS                                    javah tool options
      Facilities for Windows 95/NT resource ( .rc) ﬁles
      \
      --------------                                    --------------
      RCS                                               resource ﬁles (<name>.rc) needed to build every PROD and LIBRARY
      RCS_<osclass>                                     resource ﬁles (<name>.rc) needed to build every PROD and LIBRARY for ioc type archs
      RCS_DEFAULT                                       resource ﬁles needed to build every PROD and LIBRARY for ioc type arch systems with no RCS_<osclass> speciﬁed
      <name>_RCS                                        resource ﬁles needed to build a speciﬁc PROD or LIBRARY
      <name>_RCS_<osclass>                              os speciﬁc resource ﬁles to build a speciﬁc PROD or LIBRARY
      <name>_RCS_DEFAULT                                resource ﬁles needed to build a speciﬁc PROD or LIBRARY for ioc type arch systems with no RCS_<osclass> speciﬁed
      Assemblies
      --------------                                    --------------
      ASSEMBLIES                                        names of ﬁles to be assembled from snippets
      COMMON_ASSEMBLIES                                 names of arch-independent ﬁles to be assembled from snippets
      <name>_SNIPPETS                                   snippet ﬁles needed to build a speciﬁc assembly
      <name>_PATTERN                                    patterns for snippet ﬁles (searched from all source directories) needed to build a speciﬁc assembly
      Other deﬁnitions:
      --------------                                    --------------
      USR_VPATH                                         list of directories
      BIN_INSTALLS                                      ﬁles from speciﬁed directories to be installed into $(INSTALL_BIN) (e.g. BIN_INSTALLS = $(EPICS_BASE_BIN)/aiRecord$(OBJ))
      BIN_INSTALLS_<osclass>                            os class speciﬁc ﬁles from speciﬁed directories to be installed into $(INSTALL_BIN)
      BIN_INSTALLS_DEFAULT                              ﬁles from speciﬁed directories to be installed into $(INSTALL_BIN) for target archs with no BIN_INSTALLS_<osclass> speciﬁed
      LIB_INSTALLS                                      ﬁles from speciﬁed directories to be installed into $(INSTALL_LIB)
      LIB_INSTALLS_<osclass>                            os class speciﬁc ﬁles from speciﬁed directories to be installed into $(INSTALL_LIB)
      LIB_INSTALLS_DEFAULT                              ﬁles from speciﬁed directories to be installed into $(INSTALL_LIB) for target archs with no LIB_INSTALLS_<osclass> speciﬁed
      TARGETS                                           ﬁles to create but not install
      \
      INSTALL_LOCATION                                  installation directory (defaults to $(TOP))
      GENVERSION                                        If set, the name of a generated header ﬁle with the module version string.
      GENVERSIONMACRO                                   The CPP macro name written into the generated version header (default MODULEVERSION).
      GENVERSIONDEFAULT                                 The default version string written into the generated header if no VCS system is in use. Leave unset to use build time.
      \
      \
      \
      \
      \
      ================================================= ========================================================================================================================================================================================

Conﬁguration Files
~~~~~~~~~~~~~~~~~~

Base Conﬁgure Directory
^^^^^^^^^^^^^^^^^^^^^^^

The base/conﬁgure directory has the following directory structure:

.. code ::

        base/
           configure/
              os/
              tools/

Base Conﬁgure File Descriptions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The conﬁgure ﬁles contain deﬁnitions and make rules to be included in
the various makeﬁles.

   CONFIG.CrossCommon

   Deﬁnitions for all hosts and all targets for a cross build (host
   diﬀerent than target).

   CONFIG.gnuCommon

   Deﬁnitions for all hosts and all targets for builds using the gnu
   compiler.

   CONFIG_ADDONS

   Deﬁnitions which setup the variables that have <osclass> and DEFAULT
   options.

   CONFIG_APP_INCLUDE

   Deﬁnitions to generate include, bin, lib, perl module, db, and dbd
   directory deﬁnitions for RELEASE <top>s.

   CONFIG_BASE

   EPICS base speciﬁc deﬁnitions.

   CONFIG_BASE_VERSION

   Deﬁnitions for the version number of EPICS base. This ﬁle is used for
   creating epicsVersion.h which is installed into base/include.

   CONFIG_COMMON

   Deﬁnitions common to all builds.

   CONFIG_ENV

   Default deﬁnitions of the EPICS environment variables. This ﬁle is
   used for creating envData.c which is included in the Com library.

   CONFIG_FILE_TYPE

   Deﬁnitions to allow user created ﬁle types.

   CONFIG_SITE

   File in which you add to or modify make variables in EPICS base. A
   deﬁnition commonly overridden is CROSS_COMPILER_TARGET_ARCHS

   CONFIG_SITE_ENV

   Defaults for site speciﬁc deﬁnitions of EPICS environment variables.
   This ﬁle is used for creating envData.c which is included in the Com
   library.

   CONFIG

   Include statements for all the other conﬁgure ﬁles. You can override
   any deﬁnitions in other CONFIG\* ﬁles by placing override deﬁnitions
   at the end of this ﬁle.

   RELEASE

   Speciﬁes the location of external products such as Tornado II and
   external <tops> such as EPICS base.

   RULES

   This ﬁle just includes the appropriate rules conﬁguration ﬁle.

   RULES.Db

   Rules for building and installing database and database deﬁnition
   ﬁles. Databases generated from templates and/or CapFast schematics
   are supported.

   RULES.ioc

   Rules which allow building in the iocBoot/<iocname> directory of a
   makeBaseApp created ioc application.

   RULES_ARCHS

   Deﬁnitions and rules which allow building the make target for each
   target architecture.

   RULES_BUILD

   Build rules for the Makeﬁles

   RULES_DIRS

   Deﬁnitions and rules which allow building the make targets in each
   subdirectory. This ﬁle is included by Makeﬁles in directories with
   subdirectories to be built.

   RULES_EXPAND

   Deﬁnitions and rules to use expandVars.pl to expand @VAR@ variables
   in a ﬁle.

   RULES_FILE_TYPE

   Deﬁnitions and rules to allow user created CONFIG\* and RULES\* ﬁles
   and rules to allow user created ﬁle types.

   RULES_JAVA Deﬁnitions and rules which allow building java class ﬁles
   and java jar ﬁles.
   RULES_TARGET

   Makeﬁle code to create target speciﬁc dependency lines for libraries
   and product targets.

   RULES_TOP

   Rules speciﬁc to a <top> level directory e.g. uninstall and tar. It
   also includes the RULES_DIRS ﬁle.

   Makefile Deﬁnitions to allow creation of CONFIG_APP_INCLUDE and
   installation of the CONFIG\* ﬁles into the $(INSTALL_LOCATION)
   directory.

Base conﬁgure/os File Descriptions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The conﬁgure/os directory contains os speciﬁc make deﬁnitions. The
naming convention for the ﬁles in this directory is
CONFIG.<host>.<target> where <host> is either the arch for a speciﬁc
host system or Common for all supported host systems and <target> is
either the arch for a speciﬁc target system or Common for all supported
target systems.

For example, the ﬁle CONFIG.Common.vxWorks-pentium will contain make
deﬁnitions to be used for builds on all host systems when building for a
vxWorks-pentium target system.

Also, if a group of host or target ﬁles have the same make deﬁnitions
these common deﬁnitions can be moved to a new ﬁle which is then included
in each host or target ﬁle. An example of this is all Unix hosts which
have common deﬁnitions in a CONFIG.UnixCommon.Common ﬁle and all vxWorks
targets with deﬁnitions in CONFIG.Common.vxWorksCommon.

The base/conﬁgure/os directory contains the following os-arch speciﬁc
deﬁnitions

   CONFIG.<host>.<target>

   Speciﬁc host-target build deﬁnitions

   CONFIG.Common.<target>

   Speciﬁc target deﬁnitions for all hosts

   CONFIG.<host>.Common

   Speciﬁc host deﬁnitions for all targets

   CONFIG.UnixCommon.Common

   Deﬁnitions for Unix hosts and all targets

   CONFIG.<host>.vxWorksCommon

   Speciﬁc host deﬁnitions for all vx targets

   CONFIG_COMPAT

   R3.13 arch compatibility deﬁnitions

   CONFIG_SITE.<host>.<target>

   Site speciﬁc host-target deﬁnitions

   CONFIG_SITE.Common.<target>

   Site speciﬁc target deﬁnitions for all hosts

   CONFIG_SITE.<host>.Common

   Site speciﬁc host deﬁnitions for all targets

Base src/tools File Descriptions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

| The src/tools directory contains Perl script tools used for the build.
  The are installed by the build into
| $(INSTALL_LOCATION)/bin/$(T_A) for Host type target archs. The tools
  currently in this directory are:

convertRelease.pl
   This Perl script does consistency checks for the external <top>
   deﬁnitions in the RELEASE ﬁle. This script also creates envPaths,
   cdCommands, and dllPath.bat ﬁles for vxWorks and other IOCs.

cvsclean.pl
   This perl script ﬁnds and deletes cvs .#\* ﬁles in all directories of
   the directory tree.

dos2unix.pl
   This perl script converts text ﬁle in DOS CR/LF format to unix ISO
   format.

expandVars.pl
   This perl tool expands @VAR@ variables while copying a ﬁle.

ﬁlterWarnings.pl
   This is a perl script that ﬁlters compiler warning output (for
   HP-UX).

fullpathname.pl
   This perl script returns the fullpathname of a ﬁle.

installEpics.pl
   This is a Perl script that installs build created ﬁles into the
   install directories.

makeDbDepends.pl
   This perl script searches .substitutions and .template ﬁles for
   entries to create a DEPENDS ﬁle.

makeIncludeDbd.pl
   This perl script creates an include dbd ﬁle from ﬁle names

makeMakeﬁle.pl
   This is a perl script that creates a Makeﬁle in the created O.<arch>
   directories.

makeTestﬁle.pl
   This perl script generates a ﬁle $target.t which executes a real test
   program in the same directory.

mkmf.pl
   This perl script generates include ﬁle dependencies for targets from
   source ﬁle include statements.

munch.pl
   This is a perl script that creates a ctdt.c ﬁle for vxWorks target
   arch builds which lists the c++ static constructors and destructors.
   See munching in the vxWorks documentation for more information.

replaceVAR.pl
   This is a perl script that changes VAR(xxx) style macros in CapFast
   generated databases into the $(xxx) notation used in EPICS databases.

useManifestTool.pl
   This tools uses MS Visual C++ compiler version number to determine if
   we want to use the Manifest Tool (status=1) or not (status=0).

Build Documentation Files
~~~~~~~~~~~~~~~~~~~~~~~~~

Base Documentation Directory
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The base/documentation directory contains README ﬁles to help users
setup and build epics/base.

Base Documentation File Descriptions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The ﬁles currently in the base/documentation directory are:

README.1st
   Instructions for setup and building epics base

README.html
   html version of README.1st

README.MS\_WINDOWS
   Microsoft WIN32 speciﬁc instructions

README.niCpu030
   NI cpu030 speciﬁc instructions

README.hpux

   HPUX 11 (hpux-parisc) speciﬁc instructions

README.cris
   Cris architecture speciﬁc instructions

README.tru64unix
   Tru64Unix/Alpha speciﬁc instructions

README.darwin.html
   Installation notes for Mac OS X (Darwin)

BuildingR3.13AppsWithR3.14.html
   Describes how to modify a R3.13 vxWorks application so that it builds
   with release R3.14.1.

ConvertingR3.13AppsToR3.14.html
   Describes how to convert a R3.13 vxWorks application so that it
   contains a R3.14 conﬁgure directory and R3.14 Makeﬁles and builds
   with R3.14.1.

ConvertingR3.14.0alpha2AppsTobeta1.html
   Describes how to modify a R3.14.0alpha1 application so that it builds
   with release R3.14.0beta1.

ConvertingR3.14.0beta1AppsTobeta2.html
   Describes how to modify a R3.14.0beta1 application so that it builds
   with release R3.14.0beta2.

ConvertingR3.14.0beta2AppsToR3.14.1.html
   Describes how to modify a R3.14.0beta2 application so that it builds
   with release R3.14.1.

ConvertingR3.14.*AppsToR3.14.*.html
   Describes how to modify a R3.14.\* application so that it builds with
   next release after R3.14.*.

BuildingR3.13ExtensionsWithR3.14.html
   Describes how to modify a R3.13 extension so that it builds with
   release R3.14.1.

RELEASE\_NOTES.html
   Describes changes in the R3.14.1 release

KnownProblems.html
   List of known problems in EPICS base R3.14.1.

ReleaseChecklist.html
   Checklist of things that must be done when creating a new release of
   EPICS Base.

Startup Files
~~~~~~~~~~~~~

Base Startup Directory
^^^^^^^^^^^^^^^^^^^^^^

The base/startup directory contains scripts to help users set the
required environment variables and path. The appropriate startup ﬁles
should be executed before any EPICS builds.

Base Startup File Descriptions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The scripts currently in the base/startup directory are:

EpicsHostArch
   c shell script to set EPICS_HOST_ARCH environment variable

EpicsHostArch.pl
   perl script to set EPICS_HOST_ARCH environment variable

Site.proﬁle
   Unix bourne shell script to set path and environment variables

Site.cshrc
   Unix c shell script to set path and environment variables

cygwin.bat
   WIN32 bat ﬁle to set path and environment variables for building with
   cygwin gcc/g++ compilers

win32.bat
   WIN32 bat ﬁle to set path and environment variables for building with
   MS Visual C++ compilers

.. container:: crosslinks
